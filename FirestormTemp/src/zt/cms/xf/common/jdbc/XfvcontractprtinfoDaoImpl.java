/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.factory.*;
import java.util.Date;
import java.math.BigDecimal;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class XfvcontractprtinfoDaoImpl extends AbstractDAO implements XfvcontractprtinfoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( XfvcontractprtinfoDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT CONTRACTNO, STARTDATE, PLACE, DURATION, CONTRACTAMT, SERVICECHARGE, PARTNERNAME, CLIENTIDTYPE, CLIENTID, CLIENTNAME, PAYBACKACT, PAYBACKACTNAME, COMMNAME, NUM, PC, PHONE1, PHONE2, PHONE3, APPNO, WITHHOLDBANKNAME, COMMAMT, RECEIVEAMT, APPDATE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column CONTRACTNO
	 */
	protected static final int COLUMN_CONTRACTNO = 1;

	/** 
	 * Index of column STARTDATE
	 */
	protected static final int COLUMN_STARTDATE = 2;

	/** 
	 * Index of column PLACE
	 */
	protected static final int COLUMN_PLACE = 3;

	/** 
	 * Index of column DURATION
	 */
	protected static final int COLUMN_DURATION = 4;

	/** 
	 * Index of column CONTRACTAMT
	 */
	protected static final int COLUMN_CONTRACTAMT = 5;

	/** 
	 * Index of column SERVICECHARGE
	 */
	protected static final int COLUMN_SERVICECHARGE = 6;

	/** 
	 * Index of column PARTNERNAME
	 */
	protected static final int COLUMN_PARTNERNAME = 7;

	/** 
	 * Index of column CLIENTIDTYPE
	 */
	protected static final int COLUMN_CLIENTIDTYPE = 8;

	/** 
	 * Index of column CLIENTID
	 */
	protected static final int COLUMN_CLIENTID = 9;

	/** 
	 * Index of column CLIENTNAME
	 */
	protected static final int COLUMN_CLIENTNAME = 10;

	/** 
	 * Index of column PAYBACKACT
	 */
	protected static final int COLUMN_PAYBACKACT = 11;

	/** 
	 * Index of column PAYBACKACTNAME
	 */
	protected static final int COLUMN_PAYBACKACTNAME = 12;

	/** 
	 * Index of column COMMNAME
	 */
	protected static final int COLUMN_COMMNAME = 13;

	/** 
	 * Index of column NUM
	 */
	protected static final int COLUMN_NUM = 14;

	/** 
	 * Index of column PC
	 */
	protected static final int COLUMN_PC = 15;

	/** 
	 * Index of column PHONE1
	 */
	protected static final int COLUMN_PHONE1 = 16;

	/** 
	 * Index of column PHONE2
	 */
	protected static final int COLUMN_PHONE2 = 17;

	/** 
	 * Index of column PHONE3
	 */
	protected static final int COLUMN_PHONE3 = 18;

	/** 
	 * Index of column APPNO
	 */
	protected static final int COLUMN_APPNO = 19;

	/** 
	 * Index of column WITHHOLDBANKNAME
	 */
	protected static final int COLUMN_WITHHOLDBANKNAME = 20;

	/** 
	 * Index of column COMMAMT
	 */
	protected static final int COLUMN_COMMAMT = 21;

	/** 
	 * Index of column RECEIVEAMT
	 */
	protected static final int COLUMN_RECEIVEAMT = 22;

	/** 
	 * Index of column APPDATE
	 */
	protected static final int COLUMN_APPDATE = 23;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 23;

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria ''.
	 */
	public Xfvcontractprtinfo[] findAll() throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'APPNO = :appno'.
	 */
	public Xfvcontractprtinfo findWhereAppnoEquals(String appno) throws XfvcontractprtinfoDaoException
	{
		Xfvcontractprtinfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE APPNO = ?", new Object[] { appno } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfvcontractprtinfo findWhereContractnoEquals(String contractno) throws XfvcontractprtinfoDaoException
	{
		Xfvcontractprtinfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE CONTRACTNO = ?", new Object[] { contractno } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Xfvcontractprtinfo[] findWhereStartdateEquals(Date startdate) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STARTDATE = ? ORDER BY STARTDATE", new Object[] { startdate==null ? null : new java.sql.Timestamp( startdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'PLACE = :place'.
	 */
	public Xfvcontractprtinfo[] findWherePlaceEquals(String place) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PLACE = ? ORDER BY PLACE", new Object[] { place } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'DURATION = :duration'.
	 */
	public Xfvcontractprtinfo[] findWhereDurationEquals(BigDecimal duration) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DURATION = ? ORDER BY DURATION", new Object[] { duration } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'CONTRACTAMT = :contractamt'.
	 */
	public Xfvcontractprtinfo[] findWhereContractamtEquals(BigDecimal contractamt) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTRACTAMT = ? ORDER BY CONTRACTAMT", new Object[] { contractamt } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'SERVICECHARGE = :servicecharge'.
	 */
	public Xfvcontractprtinfo[] findWhereServicechargeEquals(BigDecimal servicecharge) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERVICECHARGE = ? ORDER BY SERVICECHARGE", new Object[] { servicecharge } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'PARTNERNAME = :partnername'.
	 */
	public Xfvcontractprtinfo[] findWherePartnernameEquals(String partnername) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARTNERNAME = ? ORDER BY PARTNERNAME", new Object[] { partnername } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'CLIENTIDTYPE = :clientidtype'.
	 */
	public Xfvcontractprtinfo[] findWhereClientidtypeEquals(String clientidtype) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTIDTYPE = ? ORDER BY CLIENTIDTYPE", new Object[] { clientidtype } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'CLIENTID = :clientid'.
	 */
	public Xfvcontractprtinfo[] findWhereClientidEquals(String clientid) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTID = ? ORDER BY CLIENTID", new Object[] { clientid } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'CLIENTNAME = :clientname'.
	 */
	public Xfvcontractprtinfo[] findWhereClientnameEquals(String clientname) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTNAME = ? ORDER BY CLIENTNAME", new Object[] { clientname } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'PAYBACKACT = :paybackact'.
	 */
	public Xfvcontractprtinfo[] findWherePaybackactEquals(String paybackact) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKACT = ? ORDER BY PAYBACKACT", new Object[] { paybackact } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'PAYBACKACTNAME = :paybackactname'.
	 */
	public Xfvcontractprtinfo[] findWherePaybackactnameEquals(String paybackactname) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKACTNAME = ? ORDER BY PAYBACKACTNAME", new Object[] { paybackactname } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'PAYBACKBANKNAME = :paybackbankname'.
	 */
	public Xfvcontractprtinfo[] findWherePaybackbanknameEquals(String paybackbankname) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBANKNAME = ? ORDER BY PAYBACKBANKNAME", new Object[] { paybackbankname } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'COMMNAME = :commname'.
	 */
	public Xfvcontractprtinfo[] findWhereCommnameEquals(String commname) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMNAME = ? ORDER BY COMMNAME", new Object[] { commname } );
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the criteria 'NUM = :num'.
	 */
	public Xfvcontractprtinfo[] findWhereNumEquals(String num) throws XfvcontractprtinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUM = ? ORDER BY NUM", new Object[] { num } );
	}

	/**
	 * Method 'XfvcontractprtinfoDaoImpl'
	 * 
	 */
	public XfvcontractprtinfoDaoImpl()
	{
	}

	/**
	 * Method 'XfvcontractprtinfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public XfvcontractprtinfoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CMS.XFVCONTRACTPRTINFO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Xfvcontractprtinfo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Xfvcontractprtinfo dto = new Xfvcontractprtinfo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Xfvcontractprtinfo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Xfvcontractprtinfo dto = new Xfvcontractprtinfo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Xfvcontractprtinfo ret[] = new Xfvcontractprtinfo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Xfvcontractprtinfo dto, ResultSet rs) throws SQLException
	{
		dto.setContractno( rs.getString( COLUMN_CONTRACTNO ) );
		dto.setStartdate( rs.getTimestamp(COLUMN_STARTDATE ) );
		dto.setPlace( rs.getString( COLUMN_PLACE ) );
		dto.setDuration( rs.getBigDecimal(COLUMN_DURATION));
		dto.setContractamt( rs.getBigDecimal(COLUMN_CONTRACTAMT));
		dto.setServicecharge( rs.getBigDecimal(COLUMN_SERVICECHARGE));
		dto.setPartnername( rs.getString( COLUMN_PARTNERNAME ) );
		dto.setClientidtype( rs.getString( COLUMN_CLIENTIDTYPE ) );
		dto.setClientid( rs.getString( COLUMN_CLIENTID ) );
		dto.setClientname( rs.getString( COLUMN_CLIENTNAME ) );
		dto.setPaybackact( rs.getString( COLUMN_PAYBACKACT ) );
		dto.setPaybackactname( rs.getString( COLUMN_PAYBACKACTNAME ) );
		dto.setCommname( rs.getString( COLUMN_COMMNAME ) );
		dto.setNum( rs.getString( COLUMN_NUM ) );
		dto.setPc( rs.getString( COLUMN_PC ) );
		dto.setPhone1( rs.getString( COLUMN_PHONE1 ) );
		dto.setPhone2( rs.getString( COLUMN_PHONE2 ) );
		dto.setPhone3( rs.getString( COLUMN_PHONE3 ) );
		dto.setAppno( rs.getString( COLUMN_APPNO ) );
		dto.setWithholdbankname( rs.getString( COLUMN_WITHHOLDBANKNAME ) );
		dto.setCommamt( rs.getBigDecimal(COLUMN_COMMAMT));
		dto.setReceiveamt( rs.getBigDecimal(COLUMN_RECEIVEAMT));
		dto.setAppdate( rs.getTimestamp(COLUMN_APPDATE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Xfvcontractprtinfo dto)
	{
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the specified arbitrary SQL statement
	 */
	public Xfvcontractprtinfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfvcontractprtinfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfvcontractprtinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the XFVCONTRACTPRTINFO table that match the specified arbitrary SQL statement
	 */
	public Xfvcontractprtinfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfvcontractprtinfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfvcontractprtinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
