/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.dao;

import java.math.BigDecimal;
import java.util.Date;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;

public interface XfactcutpaydetlDao
{
	/** 
	 * Inserts a new row in the XFACTCUTPAYDETL table.
	 */
	public XfactcutpaydetlPk insert(Xfactcutpaydetl dto) throws XfactcutpaydetlDaoException;

	/** 
	 * Updates a single row in the XFACTCUTPAYDETL table.
	 */
	public void update(XfactcutpaydetlPk pk, Xfactcutpaydetl dto) throws XfactcutpaydetlDaoException;

	/** 
	 * Deletes a single row in the XFACTCUTPAYDETL table.
	 */
	public void delete(XfactcutpaydetlPk pk) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns the rows from the XFACTCUTPAYDETL table that matches the specified primary-key value.
	 */
	public Xfactcutpaydetl findByPrimaryKey(XfactcutpaydetlPk pk) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfactcutpaydetl findByPrimaryKey(String journalno) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'JOURNALNO =:journalno and POANO=:poano'.
	 */
	public Xfactcutpaydetl[] findWhereJournalnoPoanoEquals(String journalno, String poano) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CPANO = :cpano'.
	 */
	public Xfactcutpaydetl[] findWhereCpanoEquals(String cpano) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'SERVICECHARGE = :servicecharge'.
	 */
	public Xfactcutpaydetl[] findWhereServicechargeEquals(BigDecimal servicecharge) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria ''.
	 */
	public Xfactcutpaydetl[] findAll() throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfactcutpaydetl[] findWhereJournalnoEquals(String journalno) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfactcutpaydetl[] findWhereContractnoEquals(String contractno) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'POANO = :poano'.
	 */
	public Xfactcutpaydetl[] findWherePoanoEquals(BigDecimal poano) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTNAME = :clientname'.
	 */
	public Xfactcutpaydetl[] findWhereClientnameEquals(String clientname) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTACT = :clientact'.
	 */
	public Xfactcutpaydetl[] findWhereClientactEquals(String clientact) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKAMT = :paybackamt'.
	 */
	public Xfactcutpaydetl[] findWherePaybackamtEquals(BigDecimal paybackamt) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKDATE = :paybackdate'.
	 */
	public Xfactcutpaydetl[] findWherePaybackdateEquals(Date paybackdate) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKACT = :paybackact'.
	 */
	public Xfactcutpaydetl[] findWherePaybackactEquals(String paybackact) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKACTNAME = :paybackactname'.
	 */
	public Xfactcutpaydetl[] findWherePaybackactnameEquals(String paybackactname) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKBANKID = :paybackbankid'.
	 */
	public Xfactcutpaydetl[] findWherePaybackbankidEquals(String paybackbankid) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKBANKNO = :paybackbankno'.
	 */
	public Xfactcutpaydetl[] findWherePaybackbanknoEquals(String paybackbankno) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKBANKNAME = :paybackbankname'.
	 */
	public Xfactcutpaydetl[] findWherePaybackbanknameEquals(String paybackbankname) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'RECVACT = :recvact'.
	 */
	public Xfactcutpaydetl[] findWhereRecvactEquals(String recvact) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'RECVBANKID = :recvbankid'.
	 */
	public Xfactcutpaydetl[] findWhereRecvbankidEquals(String recvbankid) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'RECVBANKNO = :recvbankno'.
	 */
	public Xfactcutpaydetl[] findWhereRecvbanknoEquals(String recvbankno) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Xfactcutpaydetl[] findWhereStartdateEquals(Date startdate) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'BILLSTATUS = :billstatus'.
	 */
	public Xfactcutpaydetl[] findWhereBillstatusEquals(String billstatus) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAIDUPAMT = :paidupamt'.
	 */
	public Xfactcutpaydetl[] findWherePaidupamtEquals(BigDecimal paidupamt) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAIDUPDATE = :paidupdate'.
	 */
	public Xfactcutpaydetl[] findWherePaidupdateEquals(Date paidupdate) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'OPERATORID = :operatorid'.
	 */
	public Xfactcutpaydetl[] findWhereOperatoridEquals(String operatorid) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'OPERATEDATE = :operatedate'.
	 */
	public Xfactcutpaydetl[] findWhereOperatedateEquals(Date operatedate) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CHECKERID = :checkerid'.
	 */
	public Xfactcutpaydetl[] findWhereCheckeridEquals(String checkerid) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CHECKDATE = :checkdate'.
	 */
	public Xfactcutpaydetl[] findWhereCheckdateEquals(Date checkdate) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CREATORID = :creatorid'.
	 */
	public Xfactcutpaydetl[] findWhereCreatoridEquals(String creatorid) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CREATEDATE = :createdate'.
	 */
	public Xfactcutpaydetl[] findWhereCreatedateEquals(Date createdate) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CREATEFORM = :createform'.
	 */
	public Xfactcutpaydetl[] findWhereCreateformEquals(String createform) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'UPDATORID = :updatorid'.
	 */
	public Xfactcutpaydetl[] findWhereUpdatoridEquals(String updatorid) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'UPDATEDATE = :updatedate'.
	 */
	public Xfactcutpaydetl[] findWhereUpdatedateEquals(Date updatedate) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'UPDATEFORM = :updateform'.
	 */
	public Xfactcutpaydetl[] findWhereUpdateformEquals(String updateform) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PRINCIPALAMT = :principalamt'.
	 */
	public Xfactcutpaydetl[] findWherePrincipalamtEquals(BigDecimal principalamt) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'SERVICECHARGEFEE = :servicechargefee'.
	 */
	public Xfactcutpaydetl[] findWhereServicechargefeeEquals(BigDecimal servicechargefee) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'LATEFEE = :latefee'.
	 */
	public Xfactcutpaydetl[] findWhereLatefeeEquals(BigDecimal latefee) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'BREACHFEE = :breachfee'.
	 */
	public Xfactcutpaydetl[] findWhereBreachfeeEquals(BigDecimal breachfee) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'BILLTYPE = :billtype'.
	 */
	public Xfactcutpaydetl[] findWhereBilltypeEquals(String billtype) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CUSTOMER_CODE = :customerCode'.
	 */
	public Xfactcutpaydetl[] findWhereCustomerCodeEquals(String customerCode) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'SIGN_ACCOUNT_NO = :signAccountNo'.
	 */
	public Xfactcutpaydetl[] findWhereSignAccountNoEquals(String signAccountNo) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTNO = :clientno'.
	 */
	public Xfactcutpaydetl[] findWhereClientnoEquals(String clientno) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTIDTYPE = :clientidtype'.
	 */
	public Xfactcutpaydetl[] findWhereClientidtypeEquals(String clientidtype) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTID = :clientid'.
	 */
	public Xfactcutpaydetl[] findWhereClientidEquals(String clientid) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'FAILUREREASON = :failurereason'.
	 */
	public Xfactcutpaydetl[] findWhereFailurereasonEquals(String failurereason) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'TXJOURNALNO = :txjournalno'.
	 */
	public Xfactcutpaydetl[] findWhereTxjournalnoEquals(String txjournalno) throws XfactcutpaydetlDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfactcutpaydetl[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfactcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfactcutpaydetl[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfactcutpaydetlDaoException;

}
