/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.dao;

import java.util.Date;
import java.math.BigDecimal;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;

public interface XfactnoinfoDao
{
	/** 
	 * Inserts a new row in the XFACTNOINFO table.
	 */
	public XfactnoinfoPk insert(Xfactnoinfo dto) throws XfactnoinfoDaoException;

	/** 
	 * Updates a single row in the XFACTNOINFO table.
	 */
	public void update(XfactnoinfoPk pk, Xfactnoinfo dto) throws XfactnoinfoDaoException;

	/** 
	 * Deletes a single row in the XFACTNOINFO table.
	 */
	public void delete(XfactnoinfoPk pk) throws XfactnoinfoDaoException;

	/** 
	 * Returns the rows from the XFACTNOINFO table that matches the specified primary-key value.
	 */
	public Xfactnoinfo findByPrimaryKey(XfactnoinfoPk pk) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'APPACTNO = :appactno'.
	 */
	public Xfactnoinfo findByPrimaryKey(String appactno) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria ''.
	 */
	public Xfactnoinfo[] findAll() throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'APPACTNO = :appactno'.
	 */
	public Xfactnoinfo[] findWhereAppactnoEquals(String appactno) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'APPNO = :appno'.
	 */
	public Xfactnoinfo[] findWhereAppnoEquals(String appno) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Xfactnoinfo[] findWhereStartdateEquals(Date startdate) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'ENDDATE = :enddate'.
	 */
	public Xfactnoinfo[] findWhereEnddateEquals(Date enddate) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'ACTNOSTATUS = :actnostatus'.
	 */
	public Xfactnoinfo[] findWhereActnostatusEquals(BigDecimal actnostatus) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'CREATORID = :creatorid'.
	 */
	public Xfactnoinfo[] findWhereCreatoridEquals(String creatorid) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'CREATEDATE = :createdate'.
	 */
	public Xfactnoinfo[] findWhereCreatedateEquals(Date createdate) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'CREATEFORM = :createform'.
	 */
	public Xfactnoinfo[] findWhereCreateformEquals(String createform) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'UPDATORID = :updatorid'.
	 */
	public Xfactnoinfo[] findWhereUpdatoridEquals(String updatorid) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'UPDATEDATE = :updatedate'.
	 */
	public Xfactnoinfo[] findWhereUpdatedateEquals(Date updatedate) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'UPDATEFORM = :updateform'.
	 */
	public Xfactnoinfo[] findWhereUpdateformEquals(String updateform) throws XfactnoinfoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the specified arbitrary SQL statement
	 */
	public Xfactnoinfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfactnoinfoDaoException;

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the specified arbitrary SQL statement
	 */
	public Xfactnoinfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfactnoinfoDaoException;

}
