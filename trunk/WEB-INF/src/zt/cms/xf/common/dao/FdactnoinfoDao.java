/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.dao;

import java.util.Date;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;

public interface FdactnoinfoDao
{
	/** 
	 * Inserts a new row in the FDACTNOINFO table.
	 */
	public FdactnoinfoPk insert(Fdactnoinfo dto) throws FdactnoinfoDaoException;

	/** 
	 * Updates a single row in the FDACTNOINFO table.
	 */
	public void update(FdactnoinfoPk pk, Fdactnoinfo dto) throws FdactnoinfoDaoException;

	/** 
	 * Deletes a single row in the FDACTNOINFO table.
	 */
	public void delete(FdactnoinfoPk pk) throws FdactnoinfoDaoException;

	/** 
	 * Returns the rows from the FDACTNOINFO table that matches the specified primary-key value.
	 */
	public Fdactnoinfo findByPrimaryKey(FdactnoinfoPk pk) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Fdactnoinfo findByPrimaryKey(String contractno) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria ''.
	 */
	public Fdactnoinfo[] findAll() throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'ACTNO = :actno'.
	 */
	public Fdactnoinfo[] findWhereActnoEquals(String actno) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'CUTPAYACTNO = :cutpayactno'.
	 */
	public Fdactnoinfo[] findWhereCutpayactnoEquals(String cutpayactno) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Fdactnoinfo[] findWhereContractnoEquals(String contractno) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'NAME = :name'.
	 */
	public Fdactnoinfo[] findWhereNameEquals(String name) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Fdactnoinfo[] findWhereStartdateEquals(Date startdate) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'ENDDATE = :enddate'.
	 */
	public Fdactnoinfo[] findWhereEnddateEquals(Date enddate) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'ACTNOSTATUS = :actnostatus'.
	 */
	public Fdactnoinfo[] findWhereActnostatusEquals(String actnostatus) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'CREATORID = :creatorid'.
	 */
	public Fdactnoinfo[] findWhereCreatoridEquals(String creatorid) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'CREATEDATE = :createdate'.
	 */
	public Fdactnoinfo[] findWhereCreatedateEquals(Date createdate) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'CREATEFORM = :createform'.
	 */
	public Fdactnoinfo[] findWhereCreateformEquals(String createform) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'UPDATORID = :updatorid'.
	 */
	public Fdactnoinfo[] findWhereUpdatoridEquals(String updatorid) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'UPDATEDATE = :updatedate'.
	 */
	public Fdactnoinfo[] findWhereUpdatedateEquals(Date updatedate) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'UPDATEFORM = :updateform'.
	 */
	public Fdactnoinfo[] findWhereUpdateformEquals(String updateform) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'REGIONCD = :regioncd'.
	 */
	public Fdactnoinfo[] findWhereRegioncdEquals(String regioncd) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'BANKCD = :bankcd'.
	 */
	public Fdactnoinfo[] findWhereBankcdEquals(String bankcd) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the criteria 'CUSTOMERID = :customerid'.
	 */
	public Fdactnoinfo[] findWhereCustomeridEquals(String customerid) throws FdactnoinfoDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the specified arbitrary SQL statement
	 */
	public Fdactnoinfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws FdactnoinfoDaoException;

	/** 
	 * Returns all rows from the FDACTNOINFO table that match the specified arbitrary SQL statement
	 */
	public Fdactnoinfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws FdactnoinfoDaoException;

}
