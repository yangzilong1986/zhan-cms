/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.factory.*;
import java.util.Date;
import java.math.BigDecimal;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class XfactpaydetlDaoImpl extends AbstractDAO implements XfactpaydetlDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( XfactpaydetlDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT JOURNALNO, CONTRACTNO, CPANO, PAYDATE, PAYSTATUS, PAYAMT, PAYACT, RECVACT, RECVBANKID, RECVBANKNO, RECVBANKNAME, OPERATORID, OPERATEDATE, CHECKERID, CHECKDATE, RECVNAME, ACCOUNTDATE, LOG FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( JOURNALNO, CONTRACTNO, CPANO, PAYDATE, PAYSTATUS, PAYAMT, PAYACT, RECVACT, RECVBANKID, RECVBANKNO, RECVBANKNAME, OPERATORID, OPERATEDATE, CHECKERID, CHECKDATE, RECVNAME, ACCOUNTDATE, LOG ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET JOURNALNO = ?, CONTRACTNO = ?, CPANO = ?, PAYDATE = ?, PAYSTATUS = ?, PAYAMT = ?, PAYACT = ?, RECVACT = ?, RECVBANKID = ?, RECVBANKNO = ?, RECVBANKNAME = ?, OPERATORID = ?, OPERATEDATE = ?, CHECKERID = ?, CHECKDATE = ?, RECVNAME = ?, ACCOUNTDATE = ?, LOG = ? WHERE JOURNALNO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE JOURNALNO = ?";

	/** 
	 * Index of column JOURNALNO
	 */
	protected static final int COLUMN_JOURNALNO = 1;

	/** 
	 * Index of column CONTRACTNO
	 */
	protected static final int COLUMN_CONTRACTNO = 2;

	/** 
	 * Index of column CPANO
	 */
	protected static final int COLUMN_CPANO = 3;

	/** 
	 * Index of column PAYDATE
	 */
	protected static final int COLUMN_PAYDATE = 4;

	/** 
	 * Index of column PAYSTATUS
	 */
	protected static final int COLUMN_PAYSTATUS = 5;

	/** 
	 * Index of column PAYAMT
	 */
	protected static final int COLUMN_PAYAMT = 6;

	/** 
	 * Index of column PAYACT
	 */
	protected static final int COLUMN_PAYACT = 7;

	/** 
	 * Index of column RECVACT
	 */
	protected static final int COLUMN_RECVACT = 8;

	/** 
	 * Index of column RECVBANKID
	 */
	protected static final int COLUMN_RECVBANKID = 9;

	/** 
	 * Index of column RECVBANKNO
	 */
	protected static final int COLUMN_RECVBANKNO = 10;

	/** 
	 * Index of column RECVBANKNAME
	 */
	protected static final int COLUMN_RECVBANKNAME = 11;

	/** 
	 * Index of column OPERATORID
	 */
	protected static final int COLUMN_OPERATORID = 12;

	/** 
	 * Index of column OPERATEDATE
	 */
	protected static final int COLUMN_OPERATEDATE = 13;

	/** 
	 * Index of column CHECKERID
	 */
	protected static final int COLUMN_CHECKERID = 14;

	/** 
	 * Index of column CHECKDATE
	 */
	protected static final int COLUMN_CHECKDATE = 15;

	/** 
	 * Index of column RECVNAME
	 */
	protected static final int COLUMN_RECVNAME = 16;

	/** 
	 * Index of column ACCOUNTDATE
	 */
	protected static final int COLUMN_ACCOUNTDATE = 17;

	/** 
	 * Index of column LOG
	 */
	protected static final int COLUMN_LOG = 18;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 18;

	/** 
	 * Index of primary-key column JOURNALNO
	 */
	protected static final int PK_COLUMN_JOURNALNO = 1;

	/** 
	 * Inserts a new row in the XFACTPAYDETL table.
	 */
	public XfactpaydetlPk insert(Xfactpaydetl dto) throws XfactpaydetlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT CMS.xf_payjournal.NEXTVAL FROM DUAL" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setJournalno( rs.getString( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getJournalno() );
			stmt.setString( index++, dto.getContractno() );
			stmt.setString( index++, dto.getCpano() );
			stmt.setTimestamp(index++, dto.getPaydate()==null ? null : new java.sql.Timestamp( dto.getPaydate().getTime() ) );
			stmt.setString( index++, dto.getPaystatus() );
			stmt.setBigDecimal( index++, dto.getPayamt() );
			stmt.setString( index++, dto.getPayact() );
			stmt.setString( index++, dto.getRecvact() );
			stmt.setString( index++, dto.getRecvbankid() );
			stmt.setString( index++, dto.getRecvbankno() );
			stmt.setString( index++, dto.getRecvbankname() );
			stmt.setString( index++, dto.getOperatorid() );
			stmt.setTimestamp(index++, dto.getOperatedate()==null ? null : new java.sql.Timestamp( dto.getOperatedate().getTime() ) );
			stmt.setString( index++, dto.getCheckerid() );
			stmt.setTimestamp(index++, dto.getCheckdate()==null ? null : new java.sql.Timestamp( dto.getCheckdate().getTime() ) );
			stmt.setString( index++, dto.getRecvname() );
			stmt.setTimestamp(index++, dto.getAccountdate()==null ? null : new java.sql.Timestamp( dto.getAccountdate().getTime() ) );
			stmt.setString( index++, dto.getLog() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the XFACTPAYDETL table.
	 */
	public void update(XfactpaydetlPk pk, Xfactpaydetl dto) throws XfactpaydetlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getJournalno() );
			stmt.setString( index++, dto.getContractno() );
			stmt.setString( index++, dto.getCpano() );
			stmt.setTimestamp(index++, dto.getPaydate()==null ? null : new java.sql.Timestamp( dto.getPaydate().getTime() ) );
			stmt.setString( index++, dto.getPaystatus() );
			stmt.setBigDecimal( index++, dto.getPayamt() );
			stmt.setString( index++, dto.getPayact() );
			stmt.setString( index++, dto.getRecvact() );
			stmt.setString( index++, dto.getRecvbankid() );
			stmt.setString( index++, dto.getRecvbankno() );
			stmt.setString( index++, dto.getRecvbankname() );
			stmt.setString( index++, dto.getOperatorid() );
			stmt.setTimestamp(index++, dto.getOperatedate()==null ? null : new java.sql.Timestamp( dto.getOperatedate().getTime() ) );
			stmt.setString( index++, dto.getCheckerid() );
			stmt.setTimestamp(index++, dto.getCheckdate()==null ? null : new java.sql.Timestamp( dto.getCheckdate().getTime() ) );
			stmt.setString( index++, dto.getRecvname() );
			stmt.setTimestamp(index++, dto.getAccountdate()==null ? null : new java.sql.Timestamp( dto.getAccountdate().getTime() ) );
			stmt.setString( index++, dto.getLog() );
			stmt.setString( 19, pk.getJournalno() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the XFACTPAYDETL table.
	 */
	public void delete(XfactpaydetlPk pk) throws XfactpaydetlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getJournalno() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the XFACTPAYDETL table that matches the specified primary-key value.
	 */
	public Xfactpaydetl findByPrimaryKey(XfactpaydetlPk pk) throws XfactpaydetlDaoException
	{
		return findByPrimaryKey( pk.getJournalno() );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfactpaydetl findByPrimaryKey(String journalno) throws XfactpaydetlDaoException
	{
		Xfactpaydetl ret[] = findByDynamicSelect( SQL_SELECT + " WHERE JOURNALNO = ?", new Object[] { journalno } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria ''.
	 */
	public Xfactpaydetl[] findAll() throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY JOURNALNO", null );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfactpaydetl[] findWhereJournalnoEquals(String journalno) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE JOURNALNO = ? ORDER BY JOURNALNO", new Object[] { journalno } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfactpaydetl[] findWhereContractnoEquals(String contractno) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTRACTNO = ? ORDER BY CONTRACTNO", new Object[] { contractno } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'CPANO = :cpano'.
	 */
	public Xfactpaydetl[] findWhereCpanoEquals(String cpano) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPANO = ? ORDER BY CPANO", new Object[] { cpano } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'PAYDATE = :paydate'.
	 */
	public Xfactpaydetl[] findWherePaydateEquals(Date paydate) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYDATE = ? ORDER BY PAYDATE", new Object[] { paydate==null ? null : new java.sql.Timestamp( paydate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'PAYSTATUS = :paystatus'.
	 */
	public Xfactpaydetl[] findWherePaystatusEquals(String paystatus) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYSTATUS = ? ORDER BY PAYSTATUS", new Object[] { paystatus } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'PAYAMT = :payamt'.
	 */
	public Xfactpaydetl[] findWherePayamtEquals(BigDecimal payamt) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYAMT = ? ORDER BY PAYAMT", new Object[] { payamt } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'PAYACT = :payact'.
	 */
	public Xfactpaydetl[] findWherePayactEquals(String payact) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYACT = ? ORDER BY PAYACT", new Object[] { payact } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'RECVACT = :recvact'.
	 */
	public Xfactpaydetl[] findWhereRecvactEquals(String recvact) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVACT = ? ORDER BY RECVACT", new Object[] { recvact } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'RECVBANKID = :recvbankid'.
	 */
	public Xfactpaydetl[] findWhereRecvbankidEquals(String recvbankid) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVBANKID = ? ORDER BY RECVBANKID", new Object[] { recvbankid } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'RECVBANKNO = :recvbankno'.
	 */
	public Xfactpaydetl[] findWhereRecvbanknoEquals(String recvbankno) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVBANKNO = ? ORDER BY RECVBANKNO", new Object[] { recvbankno } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'RECVBANKNAME = :recvbankname'.
	 */
	public Xfactpaydetl[] findWhereRecvbanknameEquals(String recvbankname) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVBANKNAME = ? ORDER BY RECVBANKNAME", new Object[] { recvbankname } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'OPERATORID = :operatorid'.
	 */
	public Xfactpaydetl[] findWhereOperatoridEquals(String operatorid) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERATORID = ? ORDER BY OPERATORID", new Object[] { operatorid } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'OPERATEDATE = :operatedate'.
	 */
	public Xfactpaydetl[] findWhereOperatedateEquals(Date operatedate) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERATEDATE = ? ORDER BY OPERATEDATE", new Object[] { operatedate==null ? null : new java.sql.Timestamp( operatedate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'CHECKERID = :checkerid'.
	 */
	public Xfactpaydetl[] findWhereCheckeridEquals(String checkerid) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHECKERID = ? ORDER BY CHECKERID", new Object[] { checkerid } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'CHECKDATE = :checkdate'.
	 */
	public Xfactpaydetl[] findWhereCheckdateEquals(Date checkdate) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHECKDATE = ? ORDER BY CHECKDATE", new Object[] { checkdate==null ? null : new java.sql.Timestamp( checkdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'RECVNAME = :recvname'.
	 */
	public Xfactpaydetl[] findWhereRecvnameEquals(String recvname) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVNAME = ? ORDER BY RECVNAME", new Object[] { recvname } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'ACCOUNTDATE = :accountdate'.
	 */
	public Xfactpaydetl[] findWhereAccountdateEquals(Date accountdate) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACCOUNTDATE = ? ORDER BY ACCOUNTDATE", new Object[] { accountdate==null ? null : new java.sql.Timestamp( accountdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'LOG = :log'.
	 */
	public Xfactpaydetl[] findWhereLogEquals(String log) throws XfactpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOG = ? ORDER BY LOG", new Object[] { log } );
	}

	/**
	 * Method 'XfactpaydetlDaoImpl'
	 * 
	 */
	public XfactpaydetlDaoImpl()
	{
	}

	/**
	 * Method 'XfactpaydetlDaoImpl'
	 * 
	 * @param userConn
	 */
	public XfactpaydetlDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CMS.XFACTPAYDETL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Xfactpaydetl fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Xfactpaydetl dto = new Xfactpaydetl();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Xfactpaydetl[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Xfactpaydetl dto = new Xfactpaydetl();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Xfactpaydetl ret[] = new Xfactpaydetl[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Xfactpaydetl dto, ResultSet rs) throws SQLException
	{
		dto.setJournalno( rs.getString( COLUMN_JOURNALNO ) );
		dto.setContractno( rs.getString( COLUMN_CONTRACTNO ) );
		dto.setCpano( rs.getString( COLUMN_CPANO ) );
		dto.setPaydate( rs.getTimestamp(COLUMN_PAYDATE ) );
		dto.setPaystatus( rs.getString( COLUMN_PAYSTATUS ) );
		dto.setPayamt( rs.getBigDecimal(COLUMN_PAYAMT));
		dto.setPayact( rs.getString( COLUMN_PAYACT ) );
		dto.setRecvact( rs.getString( COLUMN_RECVACT ) );
		dto.setRecvbankid( rs.getString( COLUMN_RECVBANKID ) );
		dto.setRecvbankno( rs.getString( COLUMN_RECVBANKNO ) );
		dto.setRecvbankname( rs.getString( COLUMN_RECVBANKNAME ) );
		dto.setOperatorid( rs.getString( COLUMN_OPERATORID ) );
		dto.setOperatedate( rs.getTimestamp(COLUMN_OPERATEDATE ) );
		dto.setCheckerid( rs.getString( COLUMN_CHECKERID ) );
		dto.setCheckdate( rs.getTimestamp(COLUMN_CHECKDATE ) );
		dto.setRecvname( rs.getString( COLUMN_RECVNAME ) );
		dto.setAccountdate( rs.getTimestamp(COLUMN_ACCOUNTDATE ) );
		dto.setLog( rs.getString( COLUMN_LOG ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Xfactpaydetl dto)
	{
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfactpaydetl[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfactpaydetlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfactpaydetl[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfactpaydetlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
