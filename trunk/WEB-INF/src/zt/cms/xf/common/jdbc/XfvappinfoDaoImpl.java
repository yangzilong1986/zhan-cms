/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.factory.*;
import java.math.BigDecimal;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class XfvappinfoDaoImpl extends AbstractDAO implements XfvappinfoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT APPNO, CLIENTID, CLIENTIDTYPE, CLIENTNAME, APPTYPE, STARTDATE, CONTRACTAMT, DURATION, SERVICECHARGE, PARTNERNAME, PARTNERACT, COMMNAME, COMMTYPE, COMMNUM, PAYBACKACT, PAYBACKBANKID, CUSTOMER_CODE, SIGN_ACCOUNT_NO, RECEIVEAMT, CLIENTNO, COMMAMT FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column APPNO
	 */
	protected static final int COLUMN_APPNO = 1;

	/** 
	 * Index of column CLIENTID
	 */
	protected static final int COLUMN_CLIENTID = 2;

	/** 
	 * Index of column CLIENTIDTYPE
	 */
	protected static final int COLUMN_CLIENTIDTYPE = 3;

	/** 
	 * Index of column CLIENTNAME
	 */
	protected static final int COLUMN_CLIENTNAME = 4;

	/** 
	 * Index of column APPTYPE
	 */
	protected static final int COLUMN_APPTYPE = 5;

	/** 
	 * Index of column STARTDATE
	 */
	protected static final int COLUMN_STARTDATE = 6;

	/** 
	 * Index of column CONTRACTAMT
	 */
	protected static final int COLUMN_CONTRACTAMT = 7;

	/** 
	 * Index of column DURATION
	 */
	protected static final int COLUMN_DURATION = 8;

	/** 
	 * Index of column SERVICECHARGE
	 */
	protected static final int COLUMN_SERVICECHARGE = 9;

	/** 
	 * Index of column PARTNERNAME
	 */
	protected static final int COLUMN_PARTNERNAME = 10;

	/** 
	 * Index of column PARTNERACT
	 */
	protected static final int COLUMN_PARTNERACT = 11;

	/** 
	 * Index of column COMMNAME
	 */
	protected static final int COLUMN_COMMNAME = 12;

	/** 
	 * Index of column COMMTYPE
	 */
	protected static final int COLUMN_COMMTYPE = 13;

	/** 
	 * Index of column COMMNUM
	 */
	protected static final int COLUMN_COMMNUM = 14;

	/** 
	 * Index of column PAYBACKACT
	 */
	protected static final int COLUMN_PAYBACKACT = 15;

	/** 
	 * Index of column PAYBACKBANKID
	 */
	protected static final int COLUMN_PAYBACKBANKID = 16;

	/** 
	 * Index of column CUSTOMER_CODE
	 */
	protected static final int COLUMN_CUSTOMER_CODE = 17;

	/** 
	 * Index of column SIGN_ACCOUNT_NO
	 */
	protected static final int COLUMN_SIGN_ACCOUNT_NO = 18;

	/** 
	 * Index of column RECEIVEAMT
	 */
	protected static final int COLUMN_RECEIVEAMT = 19;

	/** 
	 * Index of column CLIENTNO
	 */
	protected static final int COLUMN_CLIENTNO = 20;

	/** 
	 * Index of column COMMAMT
	 */
	protected static final int COLUMN_COMMAMT = 21;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 21;

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria ''.
	 */
	public Xfvappinfo[] findAll() throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'APPNO = :appno'.
	 */
	public Xfvappinfo findWhereAppnoEquals(String appno) throws XfvappinfoDaoException
	{
		Xfvappinfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE APPNO = ?", new Object[] { appno } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'CLIENTID = :clientid'.
	 */
	public Xfvappinfo[] findWhereClientidEquals(String clientid) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTID = ? ORDER BY CLIENTID", new Object[] { clientid } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'CLIENTIDTYPE = :clientidtype'.
	 */
	public Xfvappinfo[] findWhereClientidtypeEquals(String clientidtype) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTIDTYPE = ? ORDER BY CLIENTIDTYPE", new Object[] { clientidtype } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'CLIENTNAME = :clientname'.
	 */
	public Xfvappinfo[] findWhereClientnameEquals(String clientname) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTNAME = ? ORDER BY CLIENTNAME", new Object[] { clientname } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'APPTYPE = :apptype'.
	 */
	public Xfvappinfo[] findWhereApptypeEquals(String apptype) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APPTYPE = ? ORDER BY APPTYPE", new Object[] { apptype } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Xfvappinfo[] findWhereStartdateEquals(String startdate) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STARTDATE = ? ORDER BY STARTDATE", new Object[] { startdate } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'CONTRACTAMT = :contractamt'.
	 */
	public Xfvappinfo[] findWhereContractamtEquals(BigDecimal contractamt) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTRACTAMT = ? ORDER BY CONTRACTAMT", new Object[] { contractamt } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'DURATION = :duration'.
	 */
	public Xfvappinfo[] findWhereDurationEquals(String duration) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DURATION = ? ORDER BY DURATION", new Object[] { duration } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'SERVICECHARGE = :servicecharge'.
	 */
	public Xfvappinfo[] findWhereServicechargeEquals(BigDecimal servicecharge) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERVICECHARGE = ? ORDER BY SERVICECHARGE", new Object[] { servicecharge } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'PARTNERNAME = :partnername'.
	 */
	public Xfvappinfo[] findWherePartnernameEquals(String partnername) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARTNERNAME = ? ORDER BY PARTNERNAME", new Object[] { partnername } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'PARTNERACT = :partneract'.
	 */
	public Xfvappinfo[] findWherePartneractEquals(String partneract) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARTNERACT = ? ORDER BY PARTNERACT", new Object[] { partneract } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'COMMNAME = :commname'.
	 */
	public Xfvappinfo[] findWhereCommnameEquals(String commname) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMNAME = ? ORDER BY COMMNAME", new Object[] { commname } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'COMMTYPE = :commtype'.
	 */
	public Xfvappinfo[] findWhereCommtypeEquals(String commtype) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMTYPE = ? ORDER BY COMMTYPE", new Object[] { commtype } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'COMMNUM = :commnum'.
	 */
	public Xfvappinfo[] findWhereCommnumEquals(String commnum) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE COMMNUM = ? ORDER BY COMMNUM", new Object[] { commnum } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'LATEFEERATE = :latefeerate'.
	 */
	public Xfvappinfo[] findWhereLatefeerateEquals(BigDecimal latefeerate) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATEFEERATE = ? ORDER BY LATEFEERATE", new Object[] { latefeerate } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'BREACHFEERATE = :breachfeerate'.
	 */
	public Xfvappinfo[] findWhereBreachfeerateEquals(BigDecimal breachfeerate) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BREACHFEERATE = ? ORDER BY BREACHFEERATE", new Object[] { breachfeerate } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'LOWESTLATEFEE = :lowestlatefee'.
	 */
	public Xfvappinfo[] findWhereLowestlatefeeEquals(BigDecimal lowestlatefee) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOWESTLATEFEE = ? ORDER BY LOWESTLATEFEE", new Object[] { lowestlatefee } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'MANAGERFEERATE = :managerfeerate'.
	 */
	public Xfvappinfo[] findWhereManagerfeerateEquals(BigDecimal managerfeerate) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MANAGERFEERATE = ? ORDER BY MANAGERFEERATE", new Object[] { managerfeerate } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'PAYBACKACT = :paybackact'.
	 */
	public Xfvappinfo[] findWherePaybackactEquals(String paybackact) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKACT = ? ORDER BY PAYBACKACT", new Object[] { paybackact } );
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the criteria 'PAYBACKBANKID = :paybackbankid'.
	 */
	public Xfvappinfo[] findWherePaybackbankidEquals(String paybackbankid) throws XfvappinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBANKID = ? ORDER BY PAYBACKBANKID", new Object[] { paybackbankid } );
	}

	/**
	 * Method 'XfvappinfoDaoImpl'
	 * 
	 */
	public XfvappinfoDaoImpl()
	{
	}

	/**
	 * Method 'XfvappinfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public XfvappinfoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CMS.XFVAPPINFO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Xfvappinfo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Xfvappinfo dto = new Xfvappinfo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Xfvappinfo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Xfvappinfo dto = new Xfvappinfo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Xfvappinfo ret[] = new Xfvappinfo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Xfvappinfo dto, ResultSet rs) throws SQLException
	{
		dto.setAppno( rs.getString( COLUMN_APPNO ) );
		dto.setClientid( rs.getString( COLUMN_CLIENTID ) );
		dto.setClientidtype( rs.getString( COLUMN_CLIENTIDTYPE ) );
		dto.setClientname( rs.getString( COLUMN_CLIENTNAME ) );
		dto.setApptype( rs.getString( COLUMN_APPTYPE ) );
		dto.setStartdate( rs.getString( COLUMN_STARTDATE ) );
		dto.setContractamt( rs.getBigDecimal(COLUMN_CONTRACTAMT));
		dto.setDuration( rs.getString( COLUMN_DURATION ) );
		dto.setServicecharge( rs.getBigDecimal(COLUMN_SERVICECHARGE));
		dto.setPartnername( rs.getString( COLUMN_PARTNERNAME ) );
		dto.setPartneract( rs.getString( COLUMN_PARTNERACT ) );
		dto.setCommname( rs.getString( COLUMN_COMMNAME ) );
		dto.setCommtype( rs.getString( COLUMN_COMMTYPE ) );
		dto.setCommnum( rs.getString( COLUMN_COMMNUM ) );
		dto.setPaybackact( rs.getString( COLUMN_PAYBACKACT ) );
		dto.setPaybackbankid( rs.getString( COLUMN_PAYBACKBANKID ) );
		dto.setCustomerCode( rs.getString( COLUMN_CUSTOMER_CODE ) );
		dto.setSignAccountNo( rs.getString( COLUMN_SIGN_ACCOUNT_NO ) );
		dto.setReceiveamt( rs.getBigDecimal(COLUMN_RECEIVEAMT));
		dto.setClientno( rs.getBigDecimal(COLUMN_CLIENTNO));
		dto.setCommamt( rs.getBigDecimal(COLUMN_COMMAMT));
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Xfvappinfo dto)
	{
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the specified arbitrary SQL statement
	 */
	public Xfvappinfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfvappinfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new XfvappinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the XFVAPPINFO table that match the specified arbitrary SQL statement
	 */
	public Xfvappinfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfvappinfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new XfvappinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
