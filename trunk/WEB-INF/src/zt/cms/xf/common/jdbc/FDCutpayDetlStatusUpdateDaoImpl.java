/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.dto.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.List;
import java.util.ArrayList;
import java.math.*;
import java.util.Date;
import zt.cms.xf.common.exceptions.*;

public class FDCutpayDetlStatusUpdateDaoImpl extends AbstractDAO implements FDCutpayDetlStatusUpdateDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * This is the SQL statement defined for this Custom SQL DAO
	 */
	public static final String SQL = "update fdcutpatdetl set billstatus = ? where billstatus = ?";

	/**
	 * Method 'FDCutpayDetlStatusUpdateDaoImpl'
	 * 
	 */
	public FDCutpayDetlStatusUpdateDaoImpl()
	{
	}

	/**
	 * Method 'FDCutpayDetlStatusUpdateDaoImpl'
	 * 
	 * @param userConn
	 */
	public FDCutpayDetlStatusUpdateDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/**
	 * Method 'executeDynamicSQL'
	 * 
	 * @param sql
	 * @param billstatusresult
	 * @param billstatuscondition
	 * @throws FDCutpayDetlStatusUpdateDaoException
	 * @return int
	 */
	public int executeDynamicSQL(String sql, String billstatusresult, String billstatuscondition) throws FDCutpayDetlStatusUpdateDaoException
	{
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			if (isConnSupplied) {
				conn = userConn;
			} else {
				conn = ResourceManager.getConnection();
			}
		
			System.out.println( "Executing " + sql );
			stmt = conn.prepareStatement(sql);
			stmt.setString( 1, billstatusresult );
			stmt.setString( 2, billstatuscondition );
			return stmt.executeUpdate();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new FDCutpayDetlStatusUpdateDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/**
	 * Method 'execute'
	 * 
	 * @param billstatusresult
	 * @param billstatuscondition
	 * @throws FDCutpayDetlStatusUpdateDaoException
	 * @return int
	 */
	public int execute(String billstatusresult, String billstatuscondition) throws FDCutpayDetlStatusUpdateDaoException
	{
		return executeDynamicSQL( SQL, billstatusresult, billstatuscondition );
	}

}
