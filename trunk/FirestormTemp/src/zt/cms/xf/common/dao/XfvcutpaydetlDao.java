/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.dao;

import java.math.BigDecimal;
import java.util.Date;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;

public interface XfvcutpaydetlDao
{
	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria ''.
	 */
	public Xfvcutpaydetl[] findAll() throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfvcutpaydetl findWhereJournalnoEquals(String journalno) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfvcutpaydetl[] findWhereContractnoEquals(String contractno) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'POANO = :poano'.
	 */
	public Xfvcutpaydetl[] findWherePoanoEquals(BigDecimal poano) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'BILLSTATUS = :billstatus'.
	 */
	public Xfvcutpaydetl[] findWhereBillstatusEquals(String billstatus) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'ENUDT = :enudt'.
	 */
	public Xfvcutpaydetl[] findWhereEnudtEquals(String enudt) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'RECVBANKID = :recvbankid'.
	 */
	public Xfvcutpaydetl[] findWhereRecvbankidEquals(String recvbankid) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'RECVACT = :recvact'.
	 */
	public Xfvcutpaydetl[] findWhereRecvactEquals(String recvact) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PAYBACKACT = :paybackact'.
	 */
	public Xfvcutpaydetl[] findWherePaybackactEquals(String paybackact) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PAYBACKBANKID = :paybackbankid'.
	 */
	public Xfvcutpaydetl[] findWherePaybackbankidEquals(String paybackbankid) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PAYBACKDATE = :paybackdate'.
	 */
	public Xfvcutpaydetl[] findWherePaybackdateEquals(Date paybackdate) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PAIDUPAMT = :paidupamt'.
	 */
	public Xfvcutpaydetl[] findWherePaidupamtEquals(BigDecimal paidupamt) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'APPNO = :appno'.
	 */
	public Xfvcutpaydetl[] findWhereAppnoEquals(String appno) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PARTNERNAME = :partnername'.
	 */
	public Xfvcutpaydetl[] findWherePartnernameEquals(String partnername) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'CLIENTNAME = :clientname'.
	 */
	public Xfvcutpaydetl[] findWhereClientnameEquals(String clientname) throws XfvcutpaydetlDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfvcutpaydetl[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfvcutpaydetlDaoException;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfvcutpaydetl[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfvcutpaydetlDaoException;

}
