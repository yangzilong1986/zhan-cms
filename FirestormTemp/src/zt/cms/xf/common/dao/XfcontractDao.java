/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.dao;

import java.util.Date;
import java.math.BigDecimal;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;

public interface XfcontractDao
{
	/** 
	 * Inserts a new row in the XFCONTRACT table.
	 */
	public XfcontractPk insert(Xfcontract dto) throws XfcontractDaoException;

	/** 
	 * Updates a single row in the XFCONTRACT table.
	 */
	public void update(XfcontractPk pk, Xfcontract dto) throws XfcontractDaoException;

	/** 
	 * Deletes a single row in the XFCONTRACT table.
	 */
	public void delete(XfcontractPk pk) throws XfcontractDaoException;

	/** 
	 * Returns the rows from the XFCONTRACT table that matches the specified primary-key value.
	 */
	public Xfcontract findByPrimaryKey(XfcontractPk pk) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfcontract findByPrimaryKey(String contractno) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'ACTPAYDATE = :actpaydate'.
	 */
	public Xfcontract[] findWhereActpaydateEquals(Date actpaydate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'SELLERSERVICECHARGE = :sellerservicecharge'.
	 */
	public Xfcontract[] findWhereSellerservicechargeEquals(BigDecimal sellerservicecharge) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'BUYERSERVICECHARGE = :buyerservicecharge'.
	 */
	public Xfcontract[] findWhereBuyerservicechargeEquals(BigDecimal buyerservicecharge) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'ACTPAYAMT = :actpayamt'.
	 */
	public Xfcontract[] findWhereActpayamtEquals(BigDecimal actpayamt) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria ''.
	 */
	public Xfcontract[] findAll() throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'APPNO = :appno'.
	 */
	public Xfcontract[] findWhereAppnoEquals(String appno) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfcontract[] findWhereContractnoEquals(String contractno) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'APPTYPE = :apptype'.
	 */
	public Xfcontract[] findWhereApptypeEquals(String apptype) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'INTERESTTYPE = :interesttype'.
	 */
	public Xfcontract[] findWhereInteresttypeEquals(String interesttype) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Xfcontract[] findWhereStartdateEquals(Date startdate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PLACE = :place'.
	 */
	public Xfcontract[] findWherePlaceEquals(String place) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CONTRACTTYPE = :contracttype'.
	 */
	public Xfcontract[] findWhereContracttypeEquals(String contracttype) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CSTATUS = :cstatus'.
	 */
	public Xfcontract[] findWhereCstatusEquals(String cstatus) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'DURATION = :duration'.
	 */
	public Xfcontract[] findWhereDurationEquals(BigDecimal duration) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CURNO = :curno'.
	 */
	public Xfcontract[] findWhereCurnoEquals(String curno) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CONTRACTAMT = :contractamt'.
	 */
	public Xfcontract[] findWhereContractamtEquals(BigDecimal contractamt) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PRINCIPALAMT = :principalamt'.
	 */
	public Xfcontract[] findWherePrincipalamtEquals(BigDecimal principalamt) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'SERVICECHARGE = :servicecharge'.
	 */
	public Xfcontract[] findWhereServicechargeEquals(BigDecimal servicecharge) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'LATEFEERATE = :latefeerate'.
	 */
	public Xfcontract[] findWhereLatefeerateEquals(BigDecimal latefeerate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'BREACHFEERATE = :breachfeerate'.
	 */
	public Xfcontract[] findWhereBreachfeerateEquals(BigDecimal breachfeerate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'MANAGERFEERATE = :managerfeerate'.
	 */
	public Xfcontract[] findWhereManagerfeerateEquals(BigDecimal managerfeerate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'LOWESTLATEFEE = :lowestlatefee'.
	 */
	public Xfcontract[] findWhereLowestlatefeeEquals(BigDecimal lowestlatefee) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PARTNERNAME = :partnername'.
	 */
	public Xfcontract[] findWherePartnernameEquals(String partnername) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PARTNERACT = :partneract'.
	 */
	public Xfcontract[] findWherePartneractEquals(String partneract) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PARTNERBANKID = :partnerbankid'.
	 */
	public Xfcontract[] findWherePartnerbankidEquals(String partnerbankid) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PARTNERBANKNO = :partnerbankno'.
	 */
	public Xfcontract[] findWherePartnerbanknoEquals(String partnerbankno) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PARTNERBANKNAME = :partnerbankname'.
	 */
	public Xfcontract[] findWherePartnerbanknameEquals(String partnerbankname) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'COMMNAME = :commname'.
	 */
	public Xfcontract[] findWhereCommnameEquals(String commname) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'COMMTYPE = :commtype'.
	 */
	public Xfcontract[] findWhereCommtypeEquals(String commtype) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'COMMNUM = :commnum'.
	 */
	public Xfcontract[] findWhereCommnumEquals(String commnum) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CLIENTNO = :clientno'.
	 */
	public Xfcontract[] findWhereClientnoEquals(String clientno) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CLIENTIDTYPE = :clientidtype'.
	 */
	public Xfcontract[] findWhereClientidtypeEquals(String clientidtype) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CLIENTID = :clientid'.
	 */
	public Xfcontract[] findWhereClientidEquals(String clientid) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CLIENTNAME = :clientname'.
	 */
	public Xfcontract[] findWhereClientnameEquals(String clientname) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PAYBACKACT = :paybackact'.
	 */
	public Xfcontract[] findWherePaybackactEquals(String paybackact) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PAYBACKACTNAME = :paybackactname'.
	 */
	public Xfcontract[] findWherePaybackactnameEquals(String paybackactname) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PAYBACKBANKID = :paybackbankid'.
	 */
	public Xfcontract[] findWherePaybackbankidEquals(String paybackbankid) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PAYBACKBANKNO = :paybackbankno'.
	 */
	public Xfcontract[] findWherePaybackbanknoEquals(String paybackbankno) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'PAYBACKBANKNAME = :paybackbankname'.
	 */
	public Xfcontract[] findWherePaybackbanknameEquals(String paybackbankname) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CLIENTACT = :clientact'.
	 */
	public Xfcontract[] findWhereClientactEquals(String clientact) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'OPERATORID = :operatorid'.
	 */
	public Xfcontract[] findWhereOperatoridEquals(String operatorid) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'OPERATEDATE = :operatedate'.
	 */
	public Xfcontract[] findWhereOperatedateEquals(Date operatedate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CHECKERID = :checkerid'.
	 */
	public Xfcontract[] findWhereCheckeridEquals(String checkerid) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CHECKDATE = :checkdate'.
	 */
	public Xfcontract[] findWhereCheckdateEquals(Date checkdate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'REMARK = :remark'.
	 */
	public Xfcontract[] findWhereRemarkEquals(String remark) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CREATORID = :creatorid'.
	 */
	public Xfcontract[] findWhereCreatoridEquals(String creatorid) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CREATEDATE = :createdate'.
	 */
	public Xfcontract[] findWhereCreatedateEquals(Date createdate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CREATEFORM = :createform'.
	 */
	public Xfcontract[] findWhereCreateformEquals(String createform) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'UPDATORID = :updatorid'.
	 */
	public Xfcontract[] findWhereUpdatoridEquals(String updatorid) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'UPDATEDATE = :updatedate'.
	 */
	public Xfcontract[] findWhereUpdatedateEquals(Date updatedate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'UPDATEFORM = :updateform'.
	 */
	public Xfcontract[] findWhereUpdateformEquals(String updateform) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'CUSTOMER_CODE = :customerCode'.
	 */
	public Xfcontract[] findWhereCustomerCodeEquals(String customerCode) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'SIGN_ACCOUNT_NO = :signAccountNo'.
	 */
	public Xfcontract[] findWhereSignAccountNoEquals(String signAccountNo) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'COMMAMT = :commamt'.
	 */
	public Xfcontract[] findWhereCommamtEquals(BigDecimal commamt) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'RECEIVEAMT = :receiveamt'.
	 */
	public Xfcontract[] findWhereReceiveamtEquals(BigDecimal receiveamt) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'WITHHOLDBANKNAME = :withholdbankname'.
	 */
	public Xfcontract[] findWhereWithholdbanknameEquals(String withholdbankname) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'TERMINALCD = :terminalcd'.
	 */
	public Xfcontract[] findWhereTerminalcdEquals(String terminalcd) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'TERMINALDATE = :terminaldate'.
	 */
	public Xfcontract[] findWhereTerminaldateEquals(Date terminaldate) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the criteria 'TERMINALREASON = :terminalreason'.
	 */
	public Xfcontract[] findWhereTerminalreasonEquals(String terminalreason) throws XfcontractDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the XFCONTRACT table that match the specified arbitrary SQL statement
	 */
	public Xfcontract[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfcontractDaoException;

	/** 
	 * Returns all rows from the XFCONTRACT table that match the specified arbitrary SQL statement
	 */
	public Xfcontract[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfcontractDaoException;

}
