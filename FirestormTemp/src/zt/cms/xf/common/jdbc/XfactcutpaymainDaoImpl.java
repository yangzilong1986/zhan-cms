/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.factory.*;
import java.math.BigDecimal;
import java.util.Date;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class XfactcutpaymainDaoImpl extends AbstractDAO implements XfactcutpaymainDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( XfactcutpaymainDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT CONTRACTNO, POANO, STARTDATE, CLIENTACT, PAYBACKACT, PAYBACKBANKID, PAYBACKBANKNO, RECVACT, RECVBANKID, RECVBANKNO, CREATORID, CREATEDATE, CREATEFORM, UPDATORID, UPDATEDATE, UPDATEFORM, PBSTATUS, PAYBACKAMT, PAYBACKDATE, CLOSEDDATE, PAYBACKBANKNAME, OPERATORID, OPERATEDATE, CHECKERID, CHECKDATE, CLIENTNAME, PAYBACKACTNAME, OVERDUECD, CHARGEOFFCD, CLOSEDCD, PRINCIPALAMT, SERVICECHARGEFEE, ODB_PAYBACKAMT, ODB_PAYBACKDATE, ODB_BREACHFEE, ODB_LATEFEE, ODB_CHARGEOFFCD, ODB_CLOSEDCD, ODB_STARTDATE, ODB_CLOSEDDATE, CUSTOMER_CODE, SIGN_ACCOUNT_NO, CLIENTNO, CLIENTIDTYPE, CLIENTID, PRECUTPAYCD, PRECUTPAYDATE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( CONTRACTNO, POANO, STARTDATE, CLIENTACT, PAYBACKACT, PAYBACKBANKID, PAYBACKBANKNO, RECVACT, RECVBANKID, RECVBANKNO, CREATORID, CREATEDATE, CREATEFORM, UPDATORID, UPDATEDATE, UPDATEFORM, PBSTATUS, PAYBACKAMT, PAYBACKDATE, CLOSEDDATE, PAYBACKBANKNAME, OPERATORID, OPERATEDATE, CHECKERID, CHECKDATE, CLIENTNAME, PAYBACKACTNAME, OVERDUECD, CHARGEOFFCD, CLOSEDCD, PRINCIPALAMT, SERVICECHARGEFEE, ODB_PAYBACKAMT, ODB_PAYBACKDATE, ODB_BREACHFEE, ODB_LATEFEE, ODB_CHARGEOFFCD, ODB_CLOSEDCD, ODB_STARTDATE, ODB_CLOSEDDATE, CUSTOMER_CODE, SIGN_ACCOUNT_NO, CLIENTNO, CLIENTIDTYPE, CLIENTID, PRECUTPAYCD, PRECUTPAYDATE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET CONTRACTNO = ?, POANO = ?, STARTDATE = ?, CLIENTACT = ?, PAYBACKACT = ?, PAYBACKBANKID = ?, PAYBACKBANKNO = ?, RECVACT = ?, RECVBANKID = ?, RECVBANKNO = ?, CREATORID = ?, CREATEDATE = ?, CREATEFORM = ?, UPDATORID = ?, UPDATEDATE = ?, UPDATEFORM = ?, PBSTATUS = ?, PAYBACKAMT = ?, PAYBACKDATE = ?, CLOSEDDATE = ?, PAYBACKBANKNAME = ?, OPERATORID = ?, OPERATEDATE = ?, CHECKERID = ?, CHECKDATE = ?, CLIENTNAME = ?, PAYBACKACTNAME = ?, OVERDUECD = ?, CHARGEOFFCD = ?, CLOSEDCD = ?, PRINCIPALAMT = ?, SERVICECHARGEFEE = ?, ODB_PAYBACKAMT = ?, ODB_PAYBACKDATE = ?, ODB_BREACHFEE = ?, ODB_LATEFEE = ?, ODB_CHARGEOFFCD = ?, ODB_CLOSEDCD = ?, ODB_STARTDATE = ?, ODB_CLOSEDDATE = ?, CUSTOMER_CODE = ?, SIGN_ACCOUNT_NO = ?, CLIENTNO = ?, CLIENTIDTYPE = ?, CLIENTID = ?, PRECUTPAYCD = ?, PRECUTPAYDATE = ? WHERE CONTRACTNO = ? AND POANO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE CONTRACTNO = ? AND POANO = ?";

	/** 
	 * Index of column CONTRACTNO
	 */
	protected static final int COLUMN_CONTRACTNO = 1;

	/** 
	 * Index of column POANO
	 */
	protected static final int COLUMN_POANO = 2;

	/** 
	 * Index of column STARTDATE
	 */
	protected static final int COLUMN_STARTDATE = 3;

	/** 
	 * Index of column CLIENTACT
	 */
	protected static final int COLUMN_CLIENTACT = 4;

	/** 
	 * Index of column PAYBACKACT
	 */
	protected static final int COLUMN_PAYBACKACT = 5;

	/** 
	 * Index of column PAYBACKBANKID
	 */
	protected static final int COLUMN_PAYBACKBANKID = 6;

	/** 
	 * Index of column PAYBACKBANKNO
	 */
	protected static final int COLUMN_PAYBACKBANKNO = 7;

	/** 
	 * Index of column RECVACT
	 */
	protected static final int COLUMN_RECVACT = 8;

	/** 
	 * Index of column RECVBANKID
	 */
	protected static final int COLUMN_RECVBANKID = 9;

	/** 
	 * Index of column RECVBANKNO
	 */
	protected static final int COLUMN_RECVBANKNO = 10;

	/** 
	 * Index of column CREATORID
	 */
	protected static final int COLUMN_CREATORID = 11;

	/** 
	 * Index of column CREATEDATE
	 */
	protected static final int COLUMN_CREATEDATE = 12;

	/** 
	 * Index of column CREATEFORM
	 */
	protected static final int COLUMN_CREATEFORM = 13;

	/** 
	 * Index of column UPDATORID
	 */
	protected static final int COLUMN_UPDATORID = 14;

	/** 
	 * Index of column UPDATEDATE
	 */
	protected static final int COLUMN_UPDATEDATE = 15;

	/** 
	 * Index of column UPDATEFORM
	 */
	protected static final int COLUMN_UPDATEFORM = 16;

	/** 
	 * Index of column PBSTATUS
	 */
	protected static final int COLUMN_PBSTATUS = 17;

	/** 
	 * Index of column PAYBACKAMT
	 */
	protected static final int COLUMN_PAYBACKAMT = 18;

	/** 
	 * Index of column PAYBACKDATE
	 */
	protected static final int COLUMN_PAYBACKDATE = 19;

	/** 
	 * Index of column CLOSEDDATE
	 */
	protected static final int COLUMN_CLOSEDDATE = 20;

	/** 
	 * Index of column PAYBACKBANKNAME
	 */
	protected static final int COLUMN_PAYBACKBANKNAME = 21;

	/** 
	 * Index of column OPERATORID
	 */
	protected static final int COLUMN_OPERATORID = 22;

	/** 
	 * Index of column OPERATEDATE
	 */
	protected static final int COLUMN_OPERATEDATE = 23;

	/** 
	 * Index of column CHECKERID
	 */
	protected static final int COLUMN_CHECKERID = 24;

	/** 
	 * Index of column CHECKDATE
	 */
	protected static final int COLUMN_CHECKDATE = 25;

	/** 
	 * Index of column CLIENTNAME
	 */
	protected static final int COLUMN_CLIENTNAME = 26;

	/** 
	 * Index of column PAYBACKACTNAME
	 */
	protected static final int COLUMN_PAYBACKACTNAME = 27;

	/** 
	 * Index of column OVERDUECD
	 */
	protected static final int COLUMN_OVERDUECD = 28;

	/** 
	 * Index of column CHARGEOFFCD
	 */
	protected static final int COLUMN_CHARGEOFFCD = 29;

	/** 
	 * Index of column CLOSEDCD
	 */
	protected static final int COLUMN_CLOSEDCD = 30;

	/** 
	 * Index of column PRINCIPALAMT
	 */
	protected static final int COLUMN_PRINCIPALAMT = 31;

	/** 
	 * Index of column SERVICECHARGEFEE
	 */
	protected static final int COLUMN_SERVICECHARGEFEE = 32;

	/** 
	 * Index of column ODB_PAYBACKAMT
	 */
	protected static final int COLUMN_ODB_PAYBACKAMT = 33;

	/** 
	 * Index of column ODB_PAYBACKDATE
	 */
	protected static final int COLUMN_ODB_PAYBACKDATE = 34;

	/** 
	 * Index of column ODB_BREACHFEE
	 */
	protected static final int COLUMN_ODB_BREACHFEE = 35;

	/** 
	 * Index of column ODB_LATEFEE
	 */
	protected static final int COLUMN_ODB_LATEFEE = 36;

	/** 
	 * Index of column ODB_CHARGEOFFCD
	 */
	protected static final int COLUMN_ODB_CHARGEOFFCD = 37;

	/** 
	 * Index of column ODB_CLOSEDCD
	 */
	protected static final int COLUMN_ODB_CLOSEDCD = 38;

	/** 
	 * Index of column ODB_STARTDATE
	 */
	protected static final int COLUMN_ODB_STARTDATE = 39;

	/** 
	 * Index of column ODB_CLOSEDDATE
	 */
	protected static final int COLUMN_ODB_CLOSEDDATE = 40;

	/** 
	 * Index of column CUSTOMER_CODE
	 */
	protected static final int COLUMN_CUSTOMER_CODE = 41;

	/** 
	 * Index of column SIGN_ACCOUNT_NO
	 */
	protected static final int COLUMN_SIGN_ACCOUNT_NO = 42;

	/** 
	 * Index of column CLIENTNO
	 */
	protected static final int COLUMN_CLIENTNO = 43;

	/** 
	 * Index of column CLIENTIDTYPE
	 */
	protected static final int COLUMN_CLIENTIDTYPE = 44;

	/** 
	 * Index of column CLIENTID
	 */
	protected static final int COLUMN_CLIENTID = 45;

	/** 
	 * Index of column PRECUTPAYCD
	 */
	protected static final int COLUMN_PRECUTPAYCD = 46;

	/** 
	 * Index of column PRECUTPAYDATE
	 */
	protected static final int COLUMN_PRECUTPAYDATE = 47;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 47;

	/** 
	 * Index of primary-key column CONTRACTNO
	 */
	protected static final int PK_COLUMN_CONTRACTNO = 1;

	/** 
	 * Index of primary-key column POANO
	 */
	protected static final int PK_COLUMN_POANO = 2;

	/** 
	 * Inserts a new row in the XFACTCUTPAYMAIN table.
	 */
	public XfactcutpaymainPk insert(Xfactcutpaymain dto) throws XfactcutpaymainDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getContractno() );
			stmt.setBigDecimal( index++, dto.getPoano() );
			stmt.setTimestamp(index++, dto.getStartdate()==null ? null : new java.sql.Timestamp( dto.getStartdate().getTime() ) );
			stmt.setString( index++, dto.getClientact() );
			stmt.setString( index++, dto.getPaybackact() );
			stmt.setString( index++, dto.getPaybackbankid() );
			stmt.setString( index++, dto.getPaybackbankno() );
			stmt.setString( index++, dto.getRecvact() );
			stmt.setString( index++, dto.getRecvbankid() );
			stmt.setString( index++, dto.getRecvbankno() );
			stmt.setString( index++, dto.getCreatorid() );
			stmt.setTimestamp(index++, dto.getCreatedate()==null ? null : new java.sql.Timestamp( dto.getCreatedate().getTime() ) );
			stmt.setString( index++, dto.getCreateform() );
			stmt.setString( index++, dto.getUpdatorid() );
			stmt.setTimestamp(index++, dto.getUpdatedate()==null ? null : new java.sql.Timestamp( dto.getUpdatedate().getTime() ) );
			stmt.setString( index++, dto.getUpdateform() );
			stmt.setString( index++, dto.getPbstatus() );
			stmt.setBigDecimal( index++, dto.getPaybackamt() );
			stmt.setTimestamp(index++, dto.getPaybackdate()==null ? null : new java.sql.Timestamp( dto.getPaybackdate().getTime() ) );
			stmt.setTimestamp(index++, dto.getCloseddate()==null ? null : new java.sql.Timestamp( dto.getCloseddate().getTime() ) );
			stmt.setString( index++, dto.getPaybackbankname() );
			stmt.setString( index++, dto.getOperatorid() );
			stmt.setTimestamp(index++, dto.getOperatedate()==null ? null : new java.sql.Timestamp( dto.getOperatedate().getTime() ) );
			stmt.setString( index++, dto.getCheckerid() );
			stmt.setTimestamp(index++, dto.getCheckdate()==null ? null : new java.sql.Timestamp( dto.getCheckdate().getTime() ) );
			stmt.setString( index++, dto.getClientname() );
			stmt.setString( index++, dto.getPaybackactname() );
			stmt.setString( index++, dto.getOverduecd() );
			stmt.setString( index++, dto.getChargeoffcd() );
			stmt.setString( index++, dto.getClosedcd() );
			stmt.setBigDecimal( index++, dto.getPrincipalamt() );
			stmt.setBigDecimal( index++, dto.getServicechargefee() );
			stmt.setBigDecimal( index++, dto.getOdbPaybackamt() );
			stmt.setTimestamp(index++, dto.getOdbPaybackdate()==null ? null : new java.sql.Timestamp( dto.getOdbPaybackdate().getTime() ) );
			stmt.setBigDecimal( index++, dto.getOdbBreachfee() );
			stmt.setBigDecimal( index++, dto.getOdbLatefee() );
			stmt.setString( index++, dto.getOdbChargeoffcd() );
			stmt.setString( index++, dto.getOdbClosedcd() );
			stmt.setTimestamp(index++, dto.getOdbStartdate()==null ? null : new java.sql.Timestamp( dto.getOdbStartdate().getTime() ) );
			stmt.setTimestamp(index++, dto.getOdbCloseddate()==null ? null : new java.sql.Timestamp( dto.getOdbCloseddate().getTime() ) );
			stmt.setString( index++, dto.getCustomerCode() );
			stmt.setString( index++, dto.getSignAccountNo() );
			stmt.setString( index++, dto.getClientno() );
			stmt.setString( index++, dto.getClientidtype() );
			stmt.setString( index++, dto.getClientid() );
			stmt.setString( index++, dto.getPrecutpaycd() );
			stmt.setTimestamp(index++, dto.getPrecutpaydate()==null ? null : new java.sql.Timestamp( dto.getPrecutpaydate().getTime() ) );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaymainDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the XFACTCUTPAYMAIN table.
	 */
	public void update(XfactcutpaymainPk pk, Xfactcutpaymain dto) throws XfactcutpaymainDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getContractno() );
			stmt.setBigDecimal( index++, dto.getPoano() );
			stmt.setTimestamp(index++, dto.getStartdate()==null ? null : new java.sql.Timestamp( dto.getStartdate().getTime() ) );
			stmt.setString( index++, dto.getClientact() );
			stmt.setString( index++, dto.getPaybackact() );
			stmt.setString( index++, dto.getPaybackbankid() );
			stmt.setString( index++, dto.getPaybackbankno() );
			stmt.setString( index++, dto.getRecvact() );
			stmt.setString( index++, dto.getRecvbankid() );
			stmt.setString( index++, dto.getRecvbankno() );
			stmt.setString( index++, dto.getCreatorid() );
			stmt.setTimestamp(index++, dto.getCreatedate()==null ? null : new java.sql.Timestamp( dto.getCreatedate().getTime() ) );
			stmt.setString( index++, dto.getCreateform() );
			stmt.setString( index++, dto.getUpdatorid() );
			stmt.setTimestamp(index++, dto.getUpdatedate()==null ? null : new java.sql.Timestamp( dto.getUpdatedate().getTime() ) );
			stmt.setString( index++, dto.getUpdateform() );
			stmt.setString( index++, dto.getPbstatus() );
			stmt.setBigDecimal( index++, dto.getPaybackamt() );
			stmt.setTimestamp(index++, dto.getPaybackdate()==null ? null : new java.sql.Timestamp( dto.getPaybackdate().getTime() ) );
			stmt.setTimestamp(index++, dto.getCloseddate()==null ? null : new java.sql.Timestamp( dto.getCloseddate().getTime() ) );
			stmt.setString( index++, dto.getPaybackbankname() );
			stmt.setString( index++, dto.getOperatorid() );
			stmt.setTimestamp(index++, dto.getOperatedate()==null ? null : new java.sql.Timestamp( dto.getOperatedate().getTime() ) );
			stmt.setString( index++, dto.getCheckerid() );
			stmt.setTimestamp(index++, dto.getCheckdate()==null ? null : new java.sql.Timestamp( dto.getCheckdate().getTime() ) );
			stmt.setString( index++, dto.getClientname() );
			stmt.setString( index++, dto.getPaybackactname() );
			stmt.setString( index++, dto.getOverduecd() );
			stmt.setString( index++, dto.getChargeoffcd() );
			stmt.setString( index++, dto.getClosedcd() );
			stmt.setBigDecimal( index++, dto.getPrincipalamt() );
			stmt.setBigDecimal( index++, dto.getServicechargefee() );
			stmt.setBigDecimal( index++, dto.getOdbPaybackamt() );
			stmt.setTimestamp(index++, dto.getOdbPaybackdate()==null ? null : new java.sql.Timestamp( dto.getOdbPaybackdate().getTime() ) );
			stmt.setBigDecimal( index++, dto.getOdbBreachfee() );
			stmt.setBigDecimal( index++, dto.getOdbLatefee() );
			stmt.setString( index++, dto.getOdbChargeoffcd() );
			stmt.setString( index++, dto.getOdbClosedcd() );
			stmt.setTimestamp(index++, dto.getOdbStartdate()==null ? null : new java.sql.Timestamp( dto.getOdbStartdate().getTime() ) );
			stmt.setTimestamp(index++, dto.getOdbCloseddate()==null ? null : new java.sql.Timestamp( dto.getOdbCloseddate().getTime() ) );
			stmt.setString( index++, dto.getCustomerCode() );
			stmt.setString( index++, dto.getSignAccountNo() );
			stmt.setString( index++, dto.getClientno() );
			stmt.setString( index++, dto.getClientidtype() );
			stmt.setString( index++, dto.getClientid() );
			stmt.setString( index++, dto.getPrecutpaycd() );
			stmt.setTimestamp(index++, dto.getPrecutpaydate()==null ? null : new java.sql.Timestamp( dto.getPrecutpaydate().getTime() ) );
			stmt.setString( 48, pk.getContractno() );
			stmt.setBigDecimal( 49, pk.getPoano() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaymainDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the XFACTCUTPAYMAIN table.
	 */
	public void delete(XfactcutpaymainPk pk) throws XfactcutpaymainDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getContractno() );
			stmt.setBigDecimal( 2, pk.getPoano() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaymainDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the XFACTCUTPAYMAIN table that matches the specified primary-key value.
	 */
	public Xfactcutpaymain findByPrimaryKey(XfactcutpaymainPk pk) throws XfactcutpaymainDaoException
	{
		return findByPrimaryKey( pk.getContractno(), pk.getPoano() );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CONTRACTNO = :contractno AND POANO = :poano'.
	 */
	public Xfactcutpaymain findByPrimaryKey(String contractno, BigDecimal poano) throws XfactcutpaymainDaoException
	{
		Xfactcutpaymain ret[] = findByDynamicSelect( SQL_SELECT + " WHERE CONTRACTNO = ? AND POANO = ?", new Object[] { contractno, poano } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CPANO = :cpano'.
	 */
	public Xfactcutpaymain[] findWhereCpanoEquals(String cpano) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPANO = ? ORDER BY CPANO", new Object[] { cpano } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CPASTATUS = :cpastatus'.
	 */
	public Xfactcutpaymain[] findWhereCpastatusEquals(BigDecimal cpastatus) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPASTATUS = ? ORDER BY CPASTATUS", new Object[] { cpastatus } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CPAAMT = :cpaamt'.
	 */
	public Xfactcutpaymain[] findWhereCpaamtEquals(BigDecimal cpaamt) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPAAMT = ? ORDER BY CPAAMT", new Object[] { cpaamt } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'RECVCPAAMT = :recvcpaamt'.
	 */
	public Xfactcutpaymain[] findWhereRecvcpaamtEquals(BigDecimal recvcpaamt) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVCPAAMT = ? ORDER BY RECVCPAAMT", new Object[] { recvcpaamt } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'GRACEPERIOD = :graceperiod'.
	 */
	public Xfactcutpaymain[] findWhereGraceperiodEquals(BigDecimal graceperiod) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GRACEPERIOD = ? ORDER BY GRACEPERIOD", new Object[] { graceperiod } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CLOSEDDATA = :closeddata'.
	 */
	public Xfactcutpaymain[] findWhereCloseddataEquals(Date closeddata) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLOSEDDATA = ? ORDER BY CLOSEDDATA", new Object[] { closeddata==null ? null : new java.sql.Timestamp( closeddata.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'BALANCINGDATE = :balancingdate'.
	 */
	public Xfactcutpaymain[] findWhereBalancingdateEquals(Date balancingdate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BALANCINGDATE = ? ORDER BY BALANCINGDATE", new Object[] { balancingdate==null ? null : new java.sql.Timestamp( balancingdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'RECVBRACHFEE = :recvbrachfee'.
	 */
	public Xfactcutpaymain[] findWhereRecvbrachfeeEquals(BigDecimal recvbrachfee) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVBRACHFEE = ? ORDER BY RECVBRACHFEE", new Object[] { recvbrachfee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAYBAKBALANCE = :paybakbalance'.
	 */
	public Xfactcutpaymain[] findWherePaybakbalanceEquals(BigDecimal paybakbalance) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBAKBALANCE = ? ORDER BY PAYBAKBALANCE", new Object[] { paybakbalance } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'BRACHFEEBALANCE = :brachfeebalance'.
	 */
	public Xfactcutpaymain[] findWhereBrachfeebalanceEquals(BigDecimal brachfeebalance) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BRACHFEEBALANCE = ? ORDER BY BRACHFEEBALANCE", new Object[] { brachfeebalance } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAIDUPBRACHFEE = :paidupbrachfee'.
	 */
	public Xfactcutpaymain[] findWherePaidupbrachfeeEquals(BigDecimal paidupbrachfee) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAIDUPBRACHFEE = ? ORDER BY PAIDUPBRACHFEE", new Object[] { paidupbrachfee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAIDUPAMT = :paidupamt'.
	 */
	public Xfactcutpaymain[] findWherePaidupamtEquals(BigDecimal paidupamt) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAIDUPAMT = ? ORDER BY PAIDUPAMT", new Object[] { paidupamt } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAYBACKBALANCE = :paybackbalance'.
	 */
	public Xfactcutpaymain[] findWherePaybackbalanceEquals(BigDecimal paybackbalance) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBALANCE = ? ORDER BY PAYBACKBALANCE", new Object[] { paybackbalance } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'LATEFEEBALANCE = :latefeebalance'.
	 */
	public Xfactcutpaymain[] findWhereLatefeebalanceEquals(BigDecimal latefeebalance) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATEFEEBALANCE = ? ORDER BY LATEFEEBALANCE", new Object[] { latefeebalance } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'BREACHFEEBALANCE = :breachfeebalance'.
	 */
	public Xfactcutpaymain[] findWhereBreachfeebalanceEquals(BigDecimal breachfeebalance) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BREACHFEEBALANCE = ? ORDER BY BREACHFEEBALANCE", new Object[] { breachfeebalance } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAIDUPBREACHFEE = :paidupbreachfee'.
	 */
	public Xfactcutpaymain[] findWherePaidupbreachfeeEquals(BigDecimal paidupbreachfee) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAIDUPBREACHFEE = ? ORDER BY PAIDUPBREACHFEE", new Object[] { paidupbreachfee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAIDUPDATE = :paidupdate'.
	 */
	public Xfactcutpaymain[] findWherePaidupdateEquals(Date paidupdate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAIDUPDATE = ? ORDER BY PAIDUPDATE", new Object[] { paidupdate==null ? null : new java.sql.Timestamp( paidupdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'UNBILLEDBREACHFEE = :unbilledbreachfee'.
	 */
	public Xfactcutpaymain[] findWhereUnbilledbreachfeeEquals(BigDecimal unbilledbreachfee) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNBILLEDBREACHFEE = ? ORDER BY UNBILLEDBREACHFEE", new Object[] { unbilledbreachfee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'UNBILLEDLATEFEE = :unbilledlatefee'.
	 */
	public Xfactcutpaymain[] findWhereUnbilledlatefeeEquals(BigDecimal unbilledlatefee) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UNBILLEDLATEFEE = ? ORDER BY UNBILLEDLATEFEE", new Object[] { unbilledlatefee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria ''.
	 */
	public Xfactcutpaymain[] findAll() throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY CONTRACTNO, POANO", null );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfactcutpaymain[] findWhereContractnoEquals(String contractno) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTRACTNO = ? ORDER BY CONTRACTNO", new Object[] { contractno } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'POANO = :poano'.
	 */
	public Xfactcutpaymain[] findWherePoanoEquals(BigDecimal poano) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POANO = ? ORDER BY POANO", new Object[] { poano } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PBSTATUS = :pbstatus'.
	 */
	public Xfactcutpaymain[] findWherePbstatusEquals(String pbstatus) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PBSTATUS = ? ORDER BY PBSTATUS", new Object[] { pbstatus } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAYBACKAMT = :paybackamt'.
	 */
	public Xfactcutpaymain[] findWherePaybackamtEquals(BigDecimal paybackamt) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKAMT = ? ORDER BY PAYBACKAMT", new Object[] { paybackamt } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAYBACKDATE = :paybackdate'.
	 */
	public Xfactcutpaymain[] findWherePaybackdateEquals(Date paybackdate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKDATE = ? ORDER BY PAYBACKDATE", new Object[] { paybackdate==null ? null : new java.sql.Timestamp( paybackdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Xfactcutpaymain[] findWhereStartdateEquals(Date startdate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STARTDATE = ? ORDER BY STARTDATE", new Object[] { startdate==null ? null : new java.sql.Timestamp( startdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CLOSEDDATE = :closeddate'.
	 */
	public Xfactcutpaymain[] findWhereCloseddateEquals(Date closeddate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLOSEDDATE = ? ORDER BY CLOSEDDATE", new Object[] { closeddate==null ? null : new java.sql.Timestamp( closeddate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'OVERDUECD = :overduecd'.
	 */
	public Xfactcutpaymain[] findWhereOverduecdEquals(String overduecd) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OVERDUECD = ? ORDER BY OVERDUECD", new Object[] { overduecd } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CHARGEOFFCD = :chargeoffcd'.
	 */
	public Xfactcutpaymain[] findWhereChargeoffcdEquals(String chargeoffcd) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHARGEOFFCD = ? ORDER BY CHARGEOFFCD", new Object[] { chargeoffcd } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CLOSEDCD = :closedcd'.
	 */
	public Xfactcutpaymain[] findWhereClosedcdEquals(String closedcd) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLOSEDCD = ? ORDER BY CLOSEDCD", new Object[] { closedcd } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PRINCIPALAMT = :principalamt'.
	 */
	public Xfactcutpaymain[] findWherePrincipalamtEquals(BigDecimal principalamt) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRINCIPALAMT = ? ORDER BY PRINCIPALAMT", new Object[] { principalamt } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'SERVICECHARGEFEE = :servicechargefee'.
	 */
	public Xfactcutpaymain[] findWhereServicechargefeeEquals(BigDecimal servicechargefee) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERVICECHARGEFEE = ? ORDER BY SERVICECHARGEFEE", new Object[] { servicechargefee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'ODB_PAYBACKAMT = :odbPaybackamt'.
	 */
	public Xfactcutpaymain[] findWhereOdbPaybackamtEquals(BigDecimal odbPaybackamt) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ODB_PAYBACKAMT = ? ORDER BY ODB_PAYBACKAMT", new Object[] { odbPaybackamt } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'ODB_PAYBACKDATE = :odbPaybackdate'.
	 */
	public Xfactcutpaymain[] findWhereOdbPaybackdateEquals(Date odbPaybackdate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ODB_PAYBACKDATE = ? ORDER BY ODB_PAYBACKDATE", new Object[] { odbPaybackdate==null ? null : new java.sql.Timestamp( odbPaybackdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'ODB_BREACHFEE = :odbBreachfee'.
	 */
	public Xfactcutpaymain[] findWhereOdbBreachfeeEquals(BigDecimal odbBreachfee) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ODB_BREACHFEE = ? ORDER BY ODB_BREACHFEE", new Object[] { odbBreachfee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'ODB_LATEFEE = :odbLatefee'.
	 */
	public Xfactcutpaymain[] findWhereOdbLatefeeEquals(BigDecimal odbLatefee) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ODB_LATEFEE = ? ORDER BY ODB_LATEFEE", new Object[] { odbLatefee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'ODB_CHARGEOFFCD = :odbChargeoffcd'.
	 */
	public Xfactcutpaymain[] findWhereOdbChargeoffcdEquals(String odbChargeoffcd) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ODB_CHARGEOFFCD = ? ORDER BY ODB_CHARGEOFFCD", new Object[] { odbChargeoffcd } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'ODB_CLOSEDCD = :odbClosedcd'.
	 */
	public Xfactcutpaymain[] findWhereOdbClosedcdEquals(String odbClosedcd) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ODB_CLOSEDCD = ? ORDER BY ODB_CLOSEDCD", new Object[] { odbClosedcd } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'ODB_STARTDATE = :odbStartdate'.
	 */
	public Xfactcutpaymain[] findWhereOdbStartdateEquals(Date odbStartdate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ODB_STARTDATE = ? ORDER BY ODB_STARTDATE", new Object[] { odbStartdate==null ? null : new java.sql.Timestamp( odbStartdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'ODB_CLOSEDDATE = :odbCloseddate'.
	 */
	public Xfactcutpaymain[] findWhereOdbCloseddateEquals(Date odbCloseddate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ODB_CLOSEDDATE = ? ORDER BY ODB_CLOSEDDATE", new Object[] { odbCloseddate==null ? null : new java.sql.Timestamp( odbCloseddate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CLIENTNAME = :clientname'.
	 */
	public Xfactcutpaymain[] findWhereClientnameEquals(String clientname) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTNAME = ? ORDER BY CLIENTNAME", new Object[] { clientname } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CLIENTACT = :clientact'.
	 */
	public Xfactcutpaymain[] findWhereClientactEquals(String clientact) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTACT = ? ORDER BY CLIENTACT", new Object[] { clientact } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAYBACKACT = :paybackact'.
	 */
	public Xfactcutpaymain[] findWherePaybackactEquals(String paybackact) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKACT = ? ORDER BY PAYBACKACT", new Object[] { paybackact } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAYBACKACTNAME = :paybackactname'.
	 */
	public Xfactcutpaymain[] findWherePaybackactnameEquals(String paybackactname) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKACTNAME = ? ORDER BY PAYBACKACTNAME", new Object[] { paybackactname } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAYBACKBANKID = :paybackbankid'.
	 */
	public Xfactcutpaymain[] findWherePaybackbankidEquals(String paybackbankid) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBANKID = ? ORDER BY PAYBACKBANKID", new Object[] { paybackbankid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAYBACKBANKNO = :paybackbankno'.
	 */
	public Xfactcutpaymain[] findWherePaybackbanknoEquals(String paybackbankno) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBANKNO = ? ORDER BY PAYBACKBANKNO", new Object[] { paybackbankno } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PAYBACKBANKNAME = :paybackbankname'.
	 */
	public Xfactcutpaymain[] findWherePaybackbanknameEquals(String paybackbankname) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBANKNAME = ? ORDER BY PAYBACKBANKNAME", new Object[] { paybackbankname } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'RECVACT = :recvact'.
	 */
	public Xfactcutpaymain[] findWhereRecvactEquals(String recvact) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVACT = ? ORDER BY RECVACT", new Object[] { recvact } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'RECVBANKID = :recvbankid'.
	 */
	public Xfactcutpaymain[] findWhereRecvbankidEquals(String recvbankid) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVBANKID = ? ORDER BY RECVBANKID", new Object[] { recvbankid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'RECVBANKNO = :recvbankno'.
	 */
	public Xfactcutpaymain[] findWhereRecvbanknoEquals(String recvbankno) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVBANKNO = ? ORDER BY RECVBANKNO", new Object[] { recvbankno } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'OPERATORID = :operatorid'.
	 */
	public Xfactcutpaymain[] findWhereOperatoridEquals(String operatorid) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERATORID = ? ORDER BY OPERATORID", new Object[] { operatorid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'OPERATEDATE = :operatedate'.
	 */
	public Xfactcutpaymain[] findWhereOperatedateEquals(Date operatedate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERATEDATE = ? ORDER BY OPERATEDATE", new Object[] { operatedate==null ? null : new java.sql.Timestamp( operatedate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CHECKERID = :checkerid'.
	 */
	public Xfactcutpaymain[] findWhereCheckeridEquals(String checkerid) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHECKERID = ? ORDER BY CHECKERID", new Object[] { checkerid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CHECKDATE = :checkdate'.
	 */
	public Xfactcutpaymain[] findWhereCheckdateEquals(Date checkdate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHECKDATE = ? ORDER BY CHECKDATE", new Object[] { checkdate==null ? null : new java.sql.Timestamp( checkdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CREATORID = :creatorid'.
	 */
	public Xfactcutpaymain[] findWhereCreatoridEquals(String creatorid) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATORID = ? ORDER BY CREATORID", new Object[] { creatorid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CREATEDATE = :createdate'.
	 */
	public Xfactcutpaymain[] findWhereCreatedateEquals(Date createdate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATEDATE = ? ORDER BY CREATEDATE", new Object[] { createdate==null ? null : new java.sql.Timestamp( createdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CREATEFORM = :createform'.
	 */
	public Xfactcutpaymain[] findWhereCreateformEquals(String createform) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATEFORM = ? ORDER BY CREATEFORM", new Object[] { createform } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'UPDATORID = :updatorid'.
	 */
	public Xfactcutpaymain[] findWhereUpdatoridEquals(String updatorid) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATORID = ? ORDER BY UPDATORID", new Object[] { updatorid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'UPDATEDATE = :updatedate'.
	 */
	public Xfactcutpaymain[] findWhereUpdatedateEquals(Date updatedate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATEDATE = ? ORDER BY UPDATEDATE", new Object[] { updatedate==null ? null : new java.sql.Timestamp( updatedate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'UPDATEFORM = :updateform'.
	 */
	public Xfactcutpaymain[] findWhereUpdateformEquals(String updateform) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATEFORM = ? ORDER BY UPDATEFORM", new Object[] { updateform } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CUSTOMER_CODE = :customerCode'.
	 */
	public Xfactcutpaymain[] findWhereCustomerCodeEquals(String customerCode) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CUSTOMER_CODE = ? ORDER BY CUSTOMER_CODE", new Object[] { customerCode } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'SIGN_ACCOUNT_NO = :signAccountNo'.
	 */
	public Xfactcutpaymain[] findWhereSignAccountNoEquals(String signAccountNo) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SIGN_ACCOUNT_NO = ? ORDER BY SIGN_ACCOUNT_NO", new Object[] { signAccountNo } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CLIENTNO = :clientno'.
	 */
	public Xfactcutpaymain[] findWhereClientnoEquals(String clientno) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTNO = ? ORDER BY CLIENTNO", new Object[] { clientno } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CLIENTIDTYPE = :clientidtype'.
	 */
	public Xfactcutpaymain[] findWhereClientidtypeEquals(String clientidtype) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTIDTYPE = ? ORDER BY CLIENTIDTYPE", new Object[] { clientidtype } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'CLIENTID = :clientid'.
	 */
	public Xfactcutpaymain[] findWhereClientidEquals(String clientid) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTID = ? ORDER BY CLIENTID", new Object[] { clientid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PRECUTPAYCD = :precutpaycd'.
	 */
	public Xfactcutpaymain[] findWherePrecutpaycdEquals(String precutpaycd) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECUTPAYCD = ? ORDER BY PRECUTPAYCD", new Object[] { precutpaycd } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the criteria 'PRECUTPAYDATE = :precutpaydate'.
	 */
	public Xfactcutpaymain[] findWherePrecutpaydateEquals(Date precutpaydate) throws XfactcutpaymainDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRECUTPAYDATE = ? ORDER BY PRECUTPAYDATE", new Object[] { precutpaydate==null ? null : new java.sql.Timestamp( precutpaydate.getTime() ) } );
	}

	/**
	 * Method 'XfactcutpaymainDaoImpl'
	 * 
	 */
	public XfactcutpaymainDaoImpl()
	{
	}

	/**
	 * Method 'XfactcutpaymainDaoImpl'
	 * 
	 * @param userConn
	 */
	public XfactcutpaymainDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CMS.XFACTCUTPAYMAIN";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Xfactcutpaymain fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Xfactcutpaymain dto = new Xfactcutpaymain();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Xfactcutpaymain[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Xfactcutpaymain dto = new Xfactcutpaymain();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Xfactcutpaymain ret[] = new Xfactcutpaymain[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Xfactcutpaymain dto, ResultSet rs) throws SQLException
	{
		dto.setContractno( rs.getString( COLUMN_CONTRACTNO ) );
		dto.setPoano( rs.getBigDecimal(COLUMN_POANO));
		dto.setStartdate( rs.getTimestamp(COLUMN_STARTDATE ) );
		dto.setClientact( rs.getString( COLUMN_CLIENTACT ) );
		dto.setPaybackact( rs.getString( COLUMN_PAYBACKACT ) );
		dto.setPaybackbankid( rs.getString( COLUMN_PAYBACKBANKID ) );
		dto.setPaybackbankno( rs.getString( COLUMN_PAYBACKBANKNO ) );
		dto.setRecvact( rs.getString( COLUMN_RECVACT ) );
		dto.setRecvbankid( rs.getString( COLUMN_RECVBANKID ) );
		dto.setRecvbankno( rs.getString( COLUMN_RECVBANKNO ) );
		dto.setCreatorid( rs.getString( COLUMN_CREATORID ) );
		dto.setCreatedate( rs.getTimestamp(COLUMN_CREATEDATE ) );
		dto.setCreateform( rs.getString( COLUMN_CREATEFORM ) );
		dto.setUpdatorid( rs.getString( COLUMN_UPDATORID ) );
		dto.setUpdatedate( rs.getTimestamp(COLUMN_UPDATEDATE ) );
		dto.setUpdateform( rs.getString( COLUMN_UPDATEFORM ) );
		dto.setPbstatus( rs.getString( COLUMN_PBSTATUS ) );
		dto.setPaybackamt( rs.getBigDecimal(COLUMN_PAYBACKAMT));
		dto.setPaybackdate( rs.getTimestamp(COLUMN_PAYBACKDATE ) );
		dto.setCloseddate( rs.getTimestamp(COLUMN_CLOSEDDATE ) );
		dto.setPaybackbankname( rs.getString( COLUMN_PAYBACKBANKNAME ) );
		dto.setOperatorid( rs.getString( COLUMN_OPERATORID ) );
		dto.setOperatedate( rs.getTimestamp(COLUMN_OPERATEDATE ) );
		dto.setCheckerid( rs.getString( COLUMN_CHECKERID ) );
		dto.setCheckdate( rs.getTimestamp(COLUMN_CHECKDATE ) );
		dto.setClientname( rs.getString( COLUMN_CLIENTNAME ) );
		dto.setPaybackactname( rs.getString( COLUMN_PAYBACKACTNAME ) );
		dto.setOverduecd( rs.getString( COLUMN_OVERDUECD ) );
		dto.setChargeoffcd( rs.getString( COLUMN_CHARGEOFFCD ) );
		dto.setClosedcd( rs.getString( COLUMN_CLOSEDCD ) );
		dto.setPrincipalamt( rs.getBigDecimal(COLUMN_PRINCIPALAMT));
		dto.setServicechargefee( rs.getBigDecimal(COLUMN_SERVICECHARGEFEE));
		dto.setOdbPaybackamt( rs.getBigDecimal(COLUMN_ODB_PAYBACKAMT));
		dto.setOdbPaybackdate( rs.getTimestamp(COLUMN_ODB_PAYBACKDATE ) );
		dto.setOdbBreachfee( rs.getBigDecimal(COLUMN_ODB_BREACHFEE));
		dto.setOdbLatefee( rs.getBigDecimal(COLUMN_ODB_LATEFEE));
		dto.setOdbChargeoffcd( rs.getString( COLUMN_ODB_CHARGEOFFCD ) );
		dto.setOdbClosedcd( rs.getString( COLUMN_ODB_CLOSEDCD ) );
		dto.setOdbStartdate( rs.getTimestamp(COLUMN_ODB_STARTDATE ) );
		dto.setOdbCloseddate( rs.getTimestamp(COLUMN_ODB_CLOSEDDATE ) );
		dto.setCustomerCode( rs.getString( COLUMN_CUSTOMER_CODE ) );
		dto.setSignAccountNo( rs.getString( COLUMN_SIGN_ACCOUNT_NO ) );
		dto.setClientno( rs.getString( COLUMN_CLIENTNO ) );
		dto.setClientidtype( rs.getString( COLUMN_CLIENTIDTYPE ) );
		dto.setClientid( rs.getString( COLUMN_CLIENTID ) );
		dto.setPrecutpaycd( rs.getString( COLUMN_PRECUTPAYCD ) );
		dto.setPrecutpaydate( rs.getTimestamp(COLUMN_PRECUTPAYDATE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Xfactcutpaymain dto)
	{
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the specified arbitrary SQL statement
	 */
	public Xfactcutpaymain[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfactcutpaymainDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaymainDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYMAIN table that match the specified arbitrary SQL statement
	 */
	public Xfactcutpaymain[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfactcutpaymainDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaymainDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
