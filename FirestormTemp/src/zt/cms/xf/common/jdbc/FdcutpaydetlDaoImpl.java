/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.factory.*;
import java.math.BigDecimal;
import java.util.Date;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class FdcutpaydetlDaoImpl extends AbstractDAO implements FdcutpaydetlDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( FdcutpaydetlDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT SEQNO, XDKHZD_KHBH, XDKHZD_KHMC, GTHTJH_HTBH, GTHTJH_DATE, GTHTJH_LL, GTHTJH_JHJE, GTHTJH_BJJE, GTHTJH_LXJE, GTHTB_ZHBH, BILLSTATUS, CREATETIME, CUTPAYACTNO, FAILREASON, REMARK, PREFLAG, GTHTJH_HTNM, GTHTJH_JHXH, JOURNALNO, REGIONCD, BANKCD, LOCKSTATUS FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( SEQNO, XDKHZD_KHBH, XDKHZD_KHMC, GTHTJH_HTBH, GTHTJH_DATE, GTHTJH_LL, GTHTJH_JHJE, GTHTJH_BJJE, GTHTJH_LXJE, GTHTB_ZHBH, BILLSTATUS, CREATETIME, CUTPAYACTNO, FAILREASON, REMARK, PREFLAG, GTHTJH_HTNM, GTHTJH_JHXH, JOURNALNO, REGIONCD, BANKCD, LOCKSTATUS ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET SEQNO = ?, XDKHZD_KHBH = ?, XDKHZD_KHMC = ?, GTHTJH_HTBH = ?, GTHTJH_DATE = ?, GTHTJH_LL = ?, GTHTJH_JHJE = ?, GTHTJH_BJJE = ?, GTHTJH_LXJE = ?, GTHTB_ZHBH = ?, BILLSTATUS = ?, CREATETIME = ?, CUTPAYACTNO = ?, FAILREASON = ?, REMARK = ?, PREFLAG = ?, GTHTJH_HTNM = ?, GTHTJH_JHXH = ?, JOURNALNO = ?, REGIONCD = ?, BANKCD = ?, LOCKSTATUS = ? WHERE SEQNO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE SEQNO = ?";

	/** 
	 * Index of column SEQNO
	 */
	protected static final int COLUMN_SEQNO = 1;

	/** 
	 * Index of column XDKHZD_KHBH
	 */
	protected static final int COLUMN_XDKHZD_KHBH = 2;

	/** 
	 * Index of column XDKHZD_KHMC
	 */
	protected static final int COLUMN_XDKHZD_KHMC = 3;

	/** 
	 * Index of column GTHTJH_HTBH
	 */
	protected static final int COLUMN_GTHTJH_HTBH = 4;

	/** 
	 * Index of column GTHTJH_DATE
	 */
	protected static final int COLUMN_GTHTJH_DATE = 5;

	/** 
	 * Index of column GTHTJH_LL
	 */
	protected static final int COLUMN_GTHTJH_LL = 6;

	/** 
	 * Index of column GTHTJH_JHJE
	 */
	protected static final int COLUMN_GTHTJH_JHJE = 7;

	/** 
	 * Index of column GTHTJH_BJJE
	 */
	protected static final int COLUMN_GTHTJH_BJJE = 8;

	/** 
	 * Index of column GTHTJH_LXJE
	 */
	protected static final int COLUMN_GTHTJH_LXJE = 9;

	/** 
	 * Index of column GTHTB_ZHBH
	 */
	protected static final int COLUMN_GTHTB_ZHBH = 10;

	/** 
	 * Index of column BILLSTATUS
	 */
	protected static final int COLUMN_BILLSTATUS = 11;

	/** 
	 * Index of column CREATETIME
	 */
	protected static final int COLUMN_CREATETIME = 12;

	/** 
	 * Index of column CUTPAYACTNO
	 */
	protected static final int COLUMN_CUTPAYACTNO = 13;

	/** 
	 * Index of column FAILREASON
	 */
	protected static final int COLUMN_FAILREASON = 14;

	/** 
	 * Index of column REMARK
	 */
	protected static final int COLUMN_REMARK = 15;

	/** 
	 * Index of column PREFLAG
	 */
	protected static final int COLUMN_PREFLAG = 16;

	/** 
	 * Index of column GTHTJH_HTNM
	 */
	protected static final int COLUMN_GTHTJH_HTNM = 17;

	/** 
	 * Index of column GTHTJH_JHXH
	 */
	protected static final int COLUMN_GTHTJH_JHXH = 18;

	/** 
	 * Index of column JOURNALNO
	 */
	protected static final int COLUMN_JOURNALNO = 19;

	/** 
	 * Index of column REGIONCD
	 */
	protected static final int COLUMN_REGIONCD = 20;

	/** 
	 * Index of column BANKCD
	 */
	protected static final int COLUMN_BANKCD = 21;

	/** 
	 * Index of column LOCKSTATUS
	 */
	protected static final int COLUMN_LOCKSTATUS = 22;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 22;

	/** 
	 * Index of primary-key column SEQNO
	 */
	protected static final int PK_COLUMN_SEQNO = 1;

	/** 
	 * Inserts a new row in the FDCUTPAYDETL table.
	 */
	public FdcutpaydetlPk insert(Fdcutpaydetl dto) throws FdcutpaydetlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT CMS.FD_CUTPAYDETL.NEXTVAL FROM DUAL" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setSeqno( rs.getString( 1 ) );
				rs.close();
				stmt.close();
			}
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getSeqno() );
			stmt.setString( index++, dto.getXdkhzdKhbh() );
			stmt.setString( index++, dto.getXdkhzdKhmc() );
			stmt.setString( index++, dto.getGthtjhHtbh() );
			stmt.setString( index++, dto.getGthtjhDate() );
			stmt.setFloat( index++, dto.getGthtjhLl() );
			stmt.setBigDecimal( index++, dto.getGthtjhJhje() );
			stmt.setBigDecimal( index++, dto.getGthtjhBjje() );
			stmt.setBigDecimal( index++, dto.getGthtjhLxje() );
			stmt.setString( index++, dto.getGthtbZhbh() );
			stmt.setString( index++, dto.getBillstatus() );
			stmt.setTimestamp(index++, dto.getCreatetime()==null ? null : new java.sql.Timestamp( dto.getCreatetime().getTime() ) );
			stmt.setString( index++, dto.getCutpayactno() );
			stmt.setString( index++, dto.getFailreason() );
			stmt.setString( index++, dto.getRemark() );
			stmt.setString( index++, dto.getPreflag() );
			stmt.setString( index++, dto.getGthtjhHtnm() );
			stmt.setString( index++, dto.getGthtjhJhxh() );
			stmt.setString( index++, dto.getJournalno() );
			stmt.setString( index++, dto.getRegioncd() );
			stmt.setString( index++, dto.getBankcd() );
			stmt.setString( index++, dto.getLockstatus() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FdcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the FDCUTPAYDETL table.
	 */
	public void update(FdcutpaydetlPk pk, Fdcutpaydetl dto) throws FdcutpaydetlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getSeqno() );
			stmt.setString( index++, dto.getXdkhzdKhbh() );
			stmt.setString( index++, dto.getXdkhzdKhmc() );
			stmt.setString( index++, dto.getGthtjhHtbh() );
			stmt.setString( index++, dto.getGthtjhDate() );
			stmt.setFloat( index++, dto.getGthtjhLl() );
			stmt.setBigDecimal( index++, dto.getGthtjhJhje() );
			stmt.setBigDecimal( index++, dto.getGthtjhBjje() );
			stmt.setBigDecimal( index++, dto.getGthtjhLxje() );
			stmt.setString( index++, dto.getGthtbZhbh() );
			stmt.setString( index++, dto.getBillstatus() );
			stmt.setTimestamp(index++, dto.getCreatetime()==null ? null : new java.sql.Timestamp( dto.getCreatetime().getTime() ) );
			stmt.setString( index++, dto.getCutpayactno() );
			stmt.setString( index++, dto.getFailreason() );
			stmt.setString( index++, dto.getRemark() );
			stmt.setString( index++, dto.getPreflag() );
			stmt.setString( index++, dto.getGthtjhHtnm() );
			stmt.setString( index++, dto.getGthtjhJhxh() );
			stmt.setString( index++, dto.getJournalno() );
			stmt.setString( index++, dto.getRegioncd() );
			stmt.setString( index++, dto.getBankcd() );
			stmt.setString( index++, dto.getLockstatus() );
			stmt.setString( 23, pk.getSeqno() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FdcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the FDCUTPAYDETL table.
	 */
	public void delete(FdcutpaydetlPk pk) throws FdcutpaydetlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getSeqno() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FdcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the FDCUTPAYDETL table that matches the specified primary-key value.
	 */
	public Fdcutpaydetl findByPrimaryKey(FdcutpaydetlPk pk) throws FdcutpaydetlDaoException
	{
		return findByPrimaryKey( pk.getSeqno() );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'SEQNO = :seqno'.
	 */
	public Fdcutpaydetl findByPrimaryKey(String seqno) throws FdcutpaydetlDaoException
	{
		Fdcutpaydetl ret[] = findByDynamicSelect( SQL_SELECT + " WHERE SEQNO = ?", new Object[] { seqno } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria ''.
	 */
	public Fdcutpaydetl[] findAll() throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY SEQNO", null );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'SEQNO = :seqno'.
	 */
	public Fdcutpaydetl[] findWhereSeqnoEquals(String seqno) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SEQNO = ? ORDER BY SEQNO", new Object[] { seqno } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'XDKHZD_KHBH = :xdkhzdKhbh'.
	 */
	public Fdcutpaydetl[] findWhereXdkhzdKhbhEquals(String xdkhzdKhbh) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE XDKHZD_KHBH = ? ORDER BY XDKHZD_KHBH", new Object[] { xdkhzdKhbh } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'XDKHZD_KHMC = :xdkhzdKhmc'.
	 */
	public Fdcutpaydetl[] findWhereXdkhzdKhmcEquals(String xdkhzdKhmc) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE XDKHZD_KHMC = ? ORDER BY XDKHZD_KHMC", new Object[] { xdkhzdKhmc } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'GTHTJH_HTBH = :gthtjhHtbh'.
	 */
	public Fdcutpaydetl[] findWhereGthtjhHtbhEquals(String gthtjhHtbh) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GTHTJH_HTBH = ? ORDER BY GTHTJH_HTBH", new Object[] { gthtjhHtbh } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'GTHTJH_DATE = :gthtjhDate'.
	 */
	public Fdcutpaydetl[] findWhereGthtjhDateEquals(String gthtjhDate) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GTHTJH_DATE = ? ORDER BY GTHTJH_DATE", new Object[] { gthtjhDate } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'GTHTJH_LL = :gthtjhLl'.
	 */
	public Fdcutpaydetl[] findWhereGthtjhLlEquals(BigDecimal gthtjhLl) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GTHTJH_LL = ? ORDER BY GTHTJH_LL", new Object[] { gthtjhLl } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'GTHTJH_JHJE = :gthtjhJhje'.
	 */
	public Fdcutpaydetl[] findWhereGthtjhJhjeEquals(BigDecimal gthtjhJhje) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GTHTJH_JHJE = ? ORDER BY GTHTJH_JHJE", new Object[] { gthtjhJhje } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'GTHTJH_BJJE = :gthtjhBjje'.
	 */
	public Fdcutpaydetl[] findWhereGthtjhBjjeEquals(BigDecimal gthtjhBjje) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GTHTJH_BJJE = ? ORDER BY GTHTJH_BJJE", new Object[] { gthtjhBjje } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'GTHTJH_LXJE = :gthtjhLxje'.
	 */
	public Fdcutpaydetl[] findWhereGthtjhLxjeEquals(BigDecimal gthtjhLxje) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GTHTJH_LXJE = ? ORDER BY GTHTJH_LXJE", new Object[] { gthtjhLxje } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'GTHTB_ZHBH = :gthtbZhbh'.
	 */
	public Fdcutpaydetl[] findWhereGthtbZhbhEquals(String gthtbZhbh) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GTHTB_ZHBH = ? ORDER BY GTHTB_ZHBH", new Object[] { gthtbZhbh } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'CUTPAYACTNO = :cutpayactno'.
	 */
	public Fdcutpaydetl[] findWhereCutpayactnoEquals(String cutpayactno) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CUTPAYACTNO = ? ORDER BY CUTPAYACTNO", new Object[] { cutpayactno } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'BILLSTATUS = :billstatus'.
	 */
	public Fdcutpaydetl[] findWhereBillstatusEquals(String billstatus) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLSTATUS = ? ORDER BY BILLSTATUS", new Object[] { billstatus } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'CREATETIME = :createtime'.
	 */
	public Fdcutpaydetl[] findWhereCreatetimeEquals(Date createtime) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATETIME = ? ORDER BY CREATETIME", new Object[] { createtime==null ? null : new java.sql.Timestamp( createtime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'FAILREASON = :failreason'.
	 */
	public Fdcutpaydetl[] findWhereFailreasonEquals(String failreason) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FAILREASON = ? ORDER BY FAILREASON", new Object[] { failreason } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'REMARK = :remark'.
	 */
	public Fdcutpaydetl[] findWhereRemarkEquals(String remark) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REMARK = ? ORDER BY REMARK", new Object[] { remark } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'PREFLAG = :preflag'.
	 */
	public Fdcutpaydetl[] findWherePreflagEquals(String preflag) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PREFLAG = ? ORDER BY PREFLAG", new Object[] { preflag } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'GTHTJH_HTNM = :gthtjhHtnm'.
	 */
	public Fdcutpaydetl[] findWhereGthtjhHtnmEquals(String gthtjhHtnm) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GTHTJH_HTNM = ? ORDER BY GTHTJH_HTNM", new Object[] { gthtjhHtnm } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'GTHTJH_JHXH = :gthtjhJhxh'.
	 */
	public Fdcutpaydetl[] findWhereGthtjhJhxhEquals(String gthtjhJhxh) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GTHTJH_JHXH = ? ORDER BY GTHTJH_JHXH", new Object[] { gthtjhJhxh } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Fdcutpaydetl[] findWhereJournalnoEquals(String journalno) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE JOURNALNO = ? ORDER BY JOURNALNO", new Object[] { journalno } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'REGIONCD = :regioncd'.
	 */
	public Fdcutpaydetl[] findWhereRegioncdEquals(String regioncd) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REGIONCD = ? ORDER BY REGIONCD", new Object[] { regioncd } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'BANKCD = :bankcd'.
	 */
	public Fdcutpaydetl[] findWhereBankcdEquals(String bankcd) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BANKCD = ? ORDER BY BANKCD", new Object[] { bankcd } );
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the criteria 'LOCKSTATUS = :lockstatus'.
	 */
	public Fdcutpaydetl[] findWhereLockstatusEquals(String lockstatus) throws FdcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCKSTATUS = ? ORDER BY LOCKSTATUS", new Object[] { lockstatus } );
	}

	/**
	 * Method 'FdcutpaydetlDaoImpl'
	 * 
	 */
	public FdcutpaydetlDaoImpl()
	{
	}

	/**
	 * Method 'FdcutpaydetlDaoImpl'
	 * 
	 * @param userConn
	 */
	public FdcutpaydetlDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CMS.FDCUTPAYDETL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Fdcutpaydetl fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Fdcutpaydetl dto = new Fdcutpaydetl();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Fdcutpaydetl[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Fdcutpaydetl dto = new Fdcutpaydetl();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Fdcutpaydetl ret[] = new Fdcutpaydetl[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Fdcutpaydetl dto, ResultSet rs) throws SQLException
	{
		dto.setSeqno( rs.getString( COLUMN_SEQNO ) );
		dto.setXdkhzdKhbh( rs.getString( COLUMN_XDKHZD_KHBH ) );
		dto.setXdkhzdKhmc( rs.getString( COLUMN_XDKHZD_KHMC ) );
		dto.setGthtjhHtbh( rs.getString( COLUMN_GTHTJH_HTBH ) );
		dto.setGthtjhDate( rs.getString( COLUMN_GTHTJH_DATE ) );
		dto.setGthtjhLl( rs.getFloat( COLUMN_GTHTJH_LL ) );
		dto.setGthtjhJhje( rs.getBigDecimal(COLUMN_GTHTJH_JHJE));
		dto.setGthtjhBjje( rs.getBigDecimal(COLUMN_GTHTJH_BJJE));
		dto.setGthtjhLxje( rs.getBigDecimal(COLUMN_GTHTJH_LXJE));
		dto.setGthtbZhbh( rs.getString( COLUMN_GTHTB_ZHBH ) );
		dto.setBillstatus( rs.getString( COLUMN_BILLSTATUS ) );
		dto.setCreatetime( rs.getTimestamp(COLUMN_CREATETIME ) );
		dto.setCutpayactno( rs.getString( COLUMN_CUTPAYACTNO ) );
		dto.setFailreason( rs.getString( COLUMN_FAILREASON ) );
		dto.setRemark( rs.getString( COLUMN_REMARK ) );
		dto.setPreflag( rs.getString( COLUMN_PREFLAG ) );
		dto.setGthtjhHtnm( rs.getString( COLUMN_GTHTJH_HTNM ) );
		dto.setGthtjhJhxh( rs.getString( COLUMN_GTHTJH_JHXH ) );
		dto.setJournalno( rs.getString( COLUMN_JOURNALNO ) );
		dto.setRegioncd( rs.getString( COLUMN_REGIONCD ) );
		dto.setBankcd( rs.getString( COLUMN_BANKCD ) );
		dto.setLockstatus( rs.getString( COLUMN_LOCKSTATUS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Fdcutpaydetl dto)
	{
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Fdcutpaydetl[] findByDynamicSelect(String sql, Object[] sqlParams) throws FdcutpaydetlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FdcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the FDCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Fdcutpaydetl[] findByDynamicWhere(String sql, Object[] sqlParams) throws FdcutpaydetlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new FdcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
