/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.factory.*;
import java.math.BigDecimal;
import java.util.Date;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class XfproductDaoImpl extends AbstractDAO implements XfproductDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( XfproductDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT PRODUCTID, PRODUCTNAME, SERVICECHARGE, DURATION, CREATORID, CREATEDATE, CREATEFORM, UPDATORID, UPDATEDATE, UPDATEFORM, CLIENTCD, SOURCEID, APPTYPE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( PRODUCTID, PRODUCTNAME, SERVICECHARGE, DURATION, CREATORID, CREATEDATE, CREATEFORM, UPDATORID, UPDATEDATE, UPDATEFORM, CLIENTCD, SOURCEID, APPTYPE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET PRODUCTID = ?, PRODUCTNAME = ?, SERVICECHARGE = ?, DURATION = ?, CREATORID = ?, CREATEDATE = ?, CREATEFORM = ?, UPDATORID = ?, UPDATEDATE = ?, UPDATEFORM = ?, CLIENTCD = ?, SOURCEID = ?, APPTYPE = ? WHERE PRODUCTID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE PRODUCTID = ?";

	/** 
	 * Index of column PRODUCTID
	 */
	protected static final int COLUMN_PRODUCTID = 1;

	/** 
	 * Index of column PRODUCTNAME
	 */
	protected static final int COLUMN_PRODUCTNAME = 2;

	/** 
	 * Index of column SERVICECHARGE
	 */
	protected static final int COLUMN_SERVICECHARGE = 3;

	/** 
	 * Index of column DURATION
	 */
	protected static final int COLUMN_DURATION = 4;

	/** 
	 * Index of column CREATORID
	 */
	protected static final int COLUMN_CREATORID = 5;

	/** 
	 * Index of column CREATEDATE
	 */
	protected static final int COLUMN_CREATEDATE = 6;

	/** 
	 * Index of column CREATEFORM
	 */
	protected static final int COLUMN_CREATEFORM = 7;

	/** 
	 * Index of column UPDATORID
	 */
	protected static final int COLUMN_UPDATORID = 8;

	/** 
	 * Index of column UPDATEDATE
	 */
	protected static final int COLUMN_UPDATEDATE = 9;

	/** 
	 * Index of column UPDATEFORM
	 */
	protected static final int COLUMN_UPDATEFORM = 10;

	/** 
	 * Index of column CLIENTCD
	 */
	protected static final int COLUMN_CLIENTCD = 11;

	/** 
	 * Index of column SOURCEID
	 */
	protected static final int COLUMN_SOURCEID = 12;

	/** 
	 * Index of column APPTYPE
	 */
	protected static final int COLUMN_APPTYPE = 13;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 13;

	/** 
	 * Index of primary-key column PRODUCTID
	 */
	protected static final int PK_COLUMN_PRODUCTID = 1;

	/** 
	 * Inserts a new row in the XFPRODUCT table.
	 */
	public XfproductPk insert(Xfproduct dto) throws XfproductDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getProductid() );
			stmt.setString( index++, dto.getProductname() );
			stmt.setBigDecimal( index++, dto.getServicecharge() );
			stmt.setBigDecimal( index++, dto.getDuration() );
			stmt.setString( index++, dto.getCreatorid() );
			stmt.setTimestamp(index++, dto.getCreatedate()==null ? null : new java.sql.Timestamp( dto.getCreatedate().getTime() ) );
			stmt.setString( index++, dto.getCreateform() );
			stmt.setString( index++, dto.getUpdatorid() );
			stmt.setTimestamp(index++, dto.getUpdatedate()==null ? null : new java.sql.Timestamp( dto.getUpdatedate().getTime() ) );
			stmt.setString( index++, dto.getUpdateform() );
			stmt.setString( index++, dto.getClientcd() );
			stmt.setString( index++, dto.getSourceid() );
			stmt.setString( index++, dto.getApptype() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfproductDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the XFPRODUCT table.
	 */
	public void update(XfproductPk pk, Xfproduct dto) throws XfproductDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getProductid() );
			stmt.setString( index++, dto.getProductname() );
			stmt.setBigDecimal( index++, dto.getServicecharge() );
			stmt.setBigDecimal( index++, dto.getDuration() );
			stmt.setString( index++, dto.getCreatorid() );
			stmt.setTimestamp(index++, dto.getCreatedate()==null ? null : new java.sql.Timestamp( dto.getCreatedate().getTime() ) );
			stmt.setString( index++, dto.getCreateform() );
			stmt.setString( index++, dto.getUpdatorid() );
			stmt.setTimestamp(index++, dto.getUpdatedate()==null ? null : new java.sql.Timestamp( dto.getUpdatedate().getTime() ) );
			stmt.setString( index++, dto.getUpdateform() );
			stmt.setString( index++, dto.getClientcd() );
			stmt.setString( index++, dto.getSourceid() );
			stmt.setString( index++, dto.getApptype() );
			stmt.setString( 14, pk.getProductid() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfproductDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the XFPRODUCT table.
	 */
	public void delete(XfproductPk pk) throws XfproductDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getProductid() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfproductDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the XFPRODUCT table that matches the specified primary-key value.
	 */
	public Xfproduct findByPrimaryKey(XfproductPk pk) throws XfproductDaoException
	{
		return findByPrimaryKey( pk.getProductid() );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'PRODUCTID = :productid'.
	 */
	public Xfproduct findByPrimaryKey(String productid) throws XfproductDaoException
	{
		Xfproduct ret[] = findByDynamicSelect( SQL_SELECT + " WHERE PRODUCTID = ?", new Object[] { productid } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'BRATE = :brate'.
	 */
	public Xfproduct[] findWhereBrateEquals(BigDecimal brate) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BRATE = ? ORDER BY BRATE", new Object[] { brate } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'FRATESCOPE = :fratescope'.
	 */
	public Xfproduct[] findWhereFratescopeEquals(BigDecimal fratescope) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FRATESCOPE = ? ORDER BY FRATESCOPE", new Object[] { fratescope } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'LATEFEERATE = :latefeerate'.
	 */
	public Xfproduct[] findWhereLatefeerateEquals(BigDecimal latefeerate) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATEFEERATE = ? ORDER BY LATEFEERATE", new Object[] { latefeerate } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'BREACHFEERATE = :breachfeerate'.
	 */
	public Xfproduct[] findWhereBreachfeerateEquals(BigDecimal breachfeerate) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BREACHFEERATE = ? ORDER BY BREACHFEERATE", new Object[] { breachfeerate } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'MANAGERFEERATE = :managerfeerate'.
	 */
	public Xfproduct[] findWhereManagerfeerateEquals(BigDecimal managerfeerate) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MANAGERFEERATE = ? ORDER BY MANAGERFEERATE", new Object[] { managerfeerate } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'LOWESTLATEFEE = :lowestlatefee'.
	 */
	public Xfproduct[] findWhereLowestlatefeeEquals(BigDecimal lowestlatefee) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOWESTLATEFEE = ? ORDER BY LOWESTLATEFEE", new Object[] { lowestlatefee } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria ''.
	 */
	public Xfproduct[] findAll() throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY PRODUCTID", null );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'PRODUCTID = :productid'.
	 */
	public Xfproduct[] findWhereProductidEquals(String productid) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRODUCTID = ? ORDER BY PRODUCTID", new Object[] { productid } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'PRODUCTNAME = :productname'.
	 */
	public Xfproduct[] findWhereProductnameEquals(String productname) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRODUCTNAME = ? ORDER BY PRODUCTNAME", new Object[] { productname } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'SOURCEID = :sourceid'.
	 */
	public Xfproduct[] findWhereSourceidEquals(String sourceid) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SOURCEID = ? ORDER BY SOURCEID", new Object[] { sourceid } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'APPTYPE = :apptype'.
	 */
	public Xfproduct[] findWhereApptypeEquals(String apptype) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APPTYPE = ? ORDER BY APPTYPE", new Object[] { apptype } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'CLIENTCD = :clientcd'.
	 */
	public Xfproduct[] findWhereClientcdEquals(String clientcd) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTCD = ? ORDER BY CLIENTCD", new Object[] { clientcd } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'DURATION = :duration'.
	 */
	public Xfproduct[] findWhereDurationEquals(BigDecimal duration) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DURATION = ? ORDER BY DURATION", new Object[] { duration } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'SERVICECHARGE = :servicecharge'.
	 */
	public Xfproduct[] findWhereServicechargeEquals(BigDecimal servicecharge) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERVICECHARGE = ? ORDER BY SERVICECHARGE", new Object[] { servicecharge } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'CREATORID = :creatorid'.
	 */
	public Xfproduct[] findWhereCreatoridEquals(String creatorid) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATORID = ? ORDER BY CREATORID", new Object[] { creatorid } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'CREATEDATE = :createdate'.
	 */
	public Xfproduct[] findWhereCreatedateEquals(Date createdate) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATEDATE = ? ORDER BY CREATEDATE", new Object[] { createdate==null ? null : new java.sql.Timestamp( createdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'CREATEFORM = :createform'.
	 */
	public Xfproduct[] findWhereCreateformEquals(String createform) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATEFORM = ? ORDER BY CREATEFORM", new Object[] { createform } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'UPDATORID = :updatorid'.
	 */
	public Xfproduct[] findWhereUpdatoridEquals(String updatorid) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATORID = ? ORDER BY UPDATORID", new Object[] { updatorid } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'UPDATEDATE = :updatedate'.
	 */
	public Xfproduct[] findWhereUpdatedateEquals(Date updatedate) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATEDATE = ? ORDER BY UPDATEDATE", new Object[] { updatedate==null ? null : new java.sql.Timestamp( updatedate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the criteria 'UPDATEFORM = :updateform'.
	 */
	public Xfproduct[] findWhereUpdateformEquals(String updateform) throws XfproductDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATEFORM = ? ORDER BY UPDATEFORM", new Object[] { updateform } );
	}

	/**
	 * Method 'XfproductDaoImpl'
	 * 
	 */
	public XfproductDaoImpl()
	{
	}

	/**
	 * Method 'XfproductDaoImpl'
	 * 
	 * @param userConn
	 */
	public XfproductDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CMS.XFPRODUCT";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Xfproduct fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Xfproduct dto = new Xfproduct();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Xfproduct[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Xfproduct dto = new Xfproduct();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Xfproduct ret[] = new Xfproduct[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Xfproduct dto, ResultSet rs) throws SQLException
	{
		dto.setProductid( rs.getString( COLUMN_PRODUCTID ) );
		dto.setProductname( rs.getString( COLUMN_PRODUCTNAME ) );
		dto.setServicecharge( rs.getBigDecimal(COLUMN_SERVICECHARGE));
		dto.setDuration( rs.getBigDecimal(COLUMN_DURATION));
		dto.setCreatorid( rs.getString( COLUMN_CREATORID ) );
		dto.setCreatedate( rs.getTimestamp(COLUMN_CREATEDATE ) );
		dto.setCreateform( rs.getString( COLUMN_CREATEFORM ) );
		dto.setUpdatorid( rs.getString( COLUMN_UPDATORID ) );
		dto.setUpdatedate( rs.getTimestamp(COLUMN_UPDATEDATE ) );
		dto.setUpdateform( rs.getString( COLUMN_UPDATEFORM ) );
		dto.setClientcd( rs.getString( COLUMN_CLIENTCD ) );
		dto.setSourceid( rs.getString( COLUMN_SOURCEID ) );
		dto.setApptype( rs.getString( COLUMN_APPTYPE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Xfproduct dto)
	{
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the specified arbitrary SQL statement
	 */
	public Xfproduct[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfproductDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfproductDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the XFPRODUCT table that match the specified arbitrary SQL statement
	 */
	public Xfproduct[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfproductDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfproductDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
