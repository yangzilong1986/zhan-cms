/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.factory.*;
import java.math.BigDecimal;
import java.util.Date;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class XfvcutpaydetlDaoImpl extends AbstractDAO implements XfvcutpaydetlDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT JOURNALNO, CONTRACTNO, POANO, BILLSTATUS, RECVBANKID, RECVACT, PAYBACKACT, PAYBACKBANKID, PAYBACKDATE, PAIDUPAMT, APPNO, PARTNERNAME, CLIENTNAME, PAYBACKAMT, PARTNERBANKNAME, PAYBACKBANKNAME FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column JOURNALNO
	 */
	protected static final int COLUMN_JOURNALNO = 1;

	/** 
	 * Index of column CONTRACTNO
	 */
	protected static final int COLUMN_CONTRACTNO = 2;

	/** 
	 * Index of column POANO
	 */
	protected static final int COLUMN_POANO = 3;

	/** 
	 * Index of column BILLSTATUS
	 */
	protected static final int COLUMN_BILLSTATUS = 4;

	/** 
	 * Index of column RECVBANKID
	 */
	protected static final int COLUMN_RECVBANKID = 5;

	/** 
	 * Index of column RECVACT
	 */
	protected static final int COLUMN_RECVACT = 6;

	/** 
	 * Index of column PAYBACKACT
	 */
	protected static final int COLUMN_PAYBACKACT = 7;

	/** 
	 * Index of column PAYBACKBANKID
	 */
	protected static final int COLUMN_PAYBACKBANKID = 8;

	/** 
	 * Index of column PAYBACKDATE
	 */
	protected static final int COLUMN_PAYBACKDATE = 9;

	/** 
	 * Index of column PAIDUPAMT
	 */
	protected static final int COLUMN_PAIDUPAMT = 10;

	/** 
	 * Index of column APPNO
	 */
	protected static final int COLUMN_APPNO = 11;

	/** 
	 * Index of column PARTNERNAME
	 */
	protected static final int COLUMN_PARTNERNAME = 12;

	/** 
	 * Index of column CLIENTNAME
	 */
	protected static final int COLUMN_CLIENTNAME = 13;

	/** 
	 * Index of column PAYBACKAMT
	 */
	protected static final int COLUMN_PAYBACKAMT = 14;

	/** 
	 * Index of column PARTNERBANKNAME
	 */
	protected static final int COLUMN_PARTNERBANKNAME = 15;

	/** 
	 * Index of column PAYBACKBANKNAME
	 */
	protected static final int COLUMN_PAYBACKBANKNAME = 16;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 16;

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria ''.
	 */
	public Xfvcutpaydetl[] findAll() throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfvcutpaydetl findWhereJournalnoEquals(String journalno) throws XfvcutpaydetlDaoException
	{
		Xfvcutpaydetl ret[] = findByDynamicSelect( SQL_SELECT + " WHERE JOURNALNO = ?", new Object[] { journalno } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfvcutpaydetl[] findWhereContractnoEquals(String contractno) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTRACTNO = ? ORDER BY CONTRACTNO", new Object[] { contractno } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'POANO = :poano'.
	 */
	public Xfvcutpaydetl[] findWherePoanoEquals(BigDecimal poano) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POANO = ? ORDER BY POANO", new Object[] { poano } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'BILLSTATUS = :billstatus'.
	 */
	public Xfvcutpaydetl[] findWhereBillstatusEquals(String billstatus) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLSTATUS = ? ORDER BY BILLSTATUS", new Object[] { billstatus } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'ENUDT = :enudt'.
	 */
	public Xfvcutpaydetl[] findWhereEnudtEquals(String enudt) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ENUDT = ? ORDER BY ENUDT", new Object[] { enudt } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'RECVBANKID = :recvbankid'.
	 */
	public Xfvcutpaydetl[] findWhereRecvbankidEquals(String recvbankid) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVBANKID = ? ORDER BY RECVBANKID", new Object[] { recvbankid } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'RECVACT = :recvact'.
	 */
	public Xfvcutpaydetl[] findWhereRecvactEquals(String recvact) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVACT = ? ORDER BY RECVACT", new Object[] { recvact } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PAYBACKACT = :paybackact'.
	 */
	public Xfvcutpaydetl[] findWherePaybackactEquals(String paybackact) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKACT = ? ORDER BY PAYBACKACT", new Object[] { paybackact } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PAYBACKBANKID = :paybackbankid'.
	 */
	public Xfvcutpaydetl[] findWherePaybackbankidEquals(String paybackbankid) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBANKID = ? ORDER BY PAYBACKBANKID", new Object[] { paybackbankid } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PAYBACKDATE = :paybackdate'.
	 */
	public Xfvcutpaydetl[] findWherePaybackdateEquals(Date paybackdate) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKDATE = ? ORDER BY PAYBACKDATE", new Object[] { paybackdate==null ? null : new java.sql.Timestamp( paybackdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PAIDUPAMT = :paidupamt'.
	 */
	public Xfvcutpaydetl[] findWherePaidupamtEquals(BigDecimal paidupamt) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAIDUPAMT = ? ORDER BY PAIDUPAMT", new Object[] { paidupamt } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'APPNO = :appno'.
	 */
	public Xfvcutpaydetl[] findWhereAppnoEquals(String appno) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APPNO = ? ORDER BY APPNO", new Object[] { appno } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'PARTNERNAME = :partnername'.
	 */
	public Xfvcutpaydetl[] findWherePartnernameEquals(String partnername) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PARTNERNAME = ? ORDER BY PARTNERNAME", new Object[] { partnername } );
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the criteria 'CLIENTNAME = :clientname'.
	 */
	public Xfvcutpaydetl[] findWhereClientnameEquals(String clientname) throws XfvcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTNAME = ? ORDER BY CLIENTNAME", new Object[] { clientname } );
	}

	/**
	 * Method 'XfvcutpaydetlDaoImpl'
	 * 
	 */
	public XfvcutpaydetlDaoImpl()
	{
	}

	/**
	 * Method 'XfvcutpaydetlDaoImpl'
	 * 
	 * @param userConn
	 */
	public XfvcutpaydetlDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CMS.XFVCUTPAYDETL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Xfvcutpaydetl fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Xfvcutpaydetl dto = new Xfvcutpaydetl();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Xfvcutpaydetl[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Xfvcutpaydetl dto = new Xfvcutpaydetl();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Xfvcutpaydetl ret[] = new Xfvcutpaydetl[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Xfvcutpaydetl dto, ResultSet rs) throws SQLException
	{
		dto.setJournalno( rs.getString( COLUMN_JOURNALNO ) );
		dto.setContractno( rs.getString( COLUMN_CONTRACTNO ) );
		dto.setPoano( rs.getBigDecimal(COLUMN_POANO));
		dto.setBillstatus( rs.getString( COLUMN_BILLSTATUS ) );
		dto.setRecvbankid( rs.getString( COLUMN_RECVBANKID ) );
		dto.setRecvact( rs.getString( COLUMN_RECVACT ) );
		dto.setPaybackact( rs.getString( COLUMN_PAYBACKACT ) );
		dto.setPaybackbankid( rs.getString( COLUMN_PAYBACKBANKID ) );
		dto.setPaybackdate( rs.getTimestamp(COLUMN_PAYBACKDATE ) );
		dto.setPaidupamt( rs.getBigDecimal(COLUMN_PAIDUPAMT));
		dto.setAppno( rs.getString( COLUMN_APPNO ) );
		dto.setPartnername( rs.getString( COLUMN_PARTNERNAME ) );
		dto.setClientname( rs.getString( COLUMN_CLIENTNAME ) );
		dto.setPaybackamt( rs.getBigDecimal(COLUMN_PAYBACKAMT));
		dto.setPartnerbankname( rs.getString( COLUMN_PARTNERBANKNAME ) );
		dto.setPaybackbankname( rs.getString( COLUMN_PAYBACKBANKNAME ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Xfvcutpaydetl dto)
	{
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfvcutpaydetl[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfvcutpaydetlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new XfvcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the XFVCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfvcutpaydetl[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfvcutpaydetlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new XfvcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
