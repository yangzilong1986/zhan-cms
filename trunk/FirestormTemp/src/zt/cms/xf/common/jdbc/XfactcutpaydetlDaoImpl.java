/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.factory.*;
import java.math.BigDecimal;
import java.util.Date;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class XfactcutpaydetlDaoImpl extends AbstractDAO implements XfactcutpaydetlDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( XfactcutpaydetlDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT JOURNALNO, PAYBACKAMT, PAYBACKDATE, PAYBACKACT, RECVACT, PAYBACKBANKID, PAYBACKBANKNO, RECVBANKID, RECVBANKNO, CREATORID, CREATEDATE, CREATEFORM, UPDATORID, UPDATEDATE, UPDATEFORM, CONTRACTNO, POANO, BILLSTATUS, PAIDUPAMT, CLIENTNAME, CLIENTACT, PAYBACKBANKNAME, STARTDATE, PAIDUPDATE, OPERATORID, OPERATEDATE, CHECKERID, CHECKDATE, PAYBACKACTNAME, PRINCIPALAMT, LATEFEE, BREACHFEE, SERVICECHARGEFEE, BILLTYPE, CUSTOMER_CODE, SIGN_ACCOUNT_NO, CLIENTNO, CLIENTIDTYPE, CLIENTID, FAILUREREASON, TXJOURNALNO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( JOURNALNO, PAYBACKAMT, PAYBACKDATE, PAYBACKACT, RECVACT, PAYBACKBANKID, PAYBACKBANKNO, RECVBANKID, RECVBANKNO, CREATORID, CREATEDATE, CREATEFORM, UPDATORID, UPDATEDATE, UPDATEFORM, CONTRACTNO, POANO, BILLSTATUS, PAIDUPAMT, CLIENTNAME, CLIENTACT, PAYBACKBANKNAME, STARTDATE, PAIDUPDATE, OPERATORID, OPERATEDATE, CHECKERID, CHECKDATE, PAYBACKACTNAME, PRINCIPALAMT, LATEFEE, BREACHFEE, SERVICECHARGEFEE, BILLTYPE, CUSTOMER_CODE, SIGN_ACCOUNT_NO, CLIENTNO, CLIENTIDTYPE, CLIENTID, FAILUREREASON, TXJOURNALNO ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET JOURNALNO = ?, PAYBACKAMT = ?, PAYBACKDATE = ?, PAYBACKACT = ?, RECVACT = ?, PAYBACKBANKID = ?, PAYBACKBANKNO = ?, RECVBANKID = ?, RECVBANKNO = ?, CREATORID = ?, CREATEDATE = ?, CREATEFORM = ?, UPDATORID = ?, UPDATEDATE = ?, UPDATEFORM = ?, CONTRACTNO = ?, POANO = ?, BILLSTATUS = ?, PAIDUPAMT = ?, CLIENTNAME = ?, CLIENTACT = ?, PAYBACKBANKNAME = ?, STARTDATE = ?, PAIDUPDATE = ?, OPERATORID = ?, OPERATEDATE = ?, CHECKERID = ?, CHECKDATE = ?, PAYBACKACTNAME = ?, PRINCIPALAMT = ?, LATEFEE = ?, BREACHFEE = ?, SERVICECHARGEFEE = ?, BILLTYPE = ?, CUSTOMER_CODE = ?, SIGN_ACCOUNT_NO = ?, CLIENTNO = ?, CLIENTIDTYPE = ?, CLIENTID = ?, FAILUREREASON = ?, TXJOURNALNO = ? WHERE JOURNALNO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE JOURNALNO = ?";

	/** 
	 * Index of column JOURNALNO
	 */
	protected static final int COLUMN_JOURNALNO = 1;

	/** 
	 * Index of column PAYBACKAMT
	 */
	protected static final int COLUMN_PAYBACKAMT = 2;

	/** 
	 * Index of column PAYBACKDATE
	 */
	protected static final int COLUMN_PAYBACKDATE = 3;

	/** 
	 * Index of column PAYBACKACT
	 */
	protected static final int COLUMN_PAYBACKACT = 4;

	/** 
	 * Index of column RECVACT
	 */
	protected static final int COLUMN_RECVACT = 5;

	/** 
	 * Index of column PAYBACKBANKID
	 */
	protected static final int COLUMN_PAYBACKBANKID = 6;

	/** 
	 * Index of column PAYBACKBANKNO
	 */
	protected static final int COLUMN_PAYBACKBANKNO = 7;

	/** 
	 * Index of column RECVBANKID
	 */
	protected static final int COLUMN_RECVBANKID = 8;

	/** 
	 * Index of column RECVBANKNO
	 */
	protected static final int COLUMN_RECVBANKNO = 9;

	/** 
	 * Index of column CREATORID
	 */
	protected static final int COLUMN_CREATORID = 10;

	/** 
	 * Index of column CREATEDATE
	 */
	protected static final int COLUMN_CREATEDATE = 11;

	/** 
	 * Index of column CREATEFORM
	 */
	protected static final int COLUMN_CREATEFORM = 12;

	/** 
	 * Index of column UPDATORID
	 */
	protected static final int COLUMN_UPDATORID = 13;

	/** 
	 * Index of column UPDATEDATE
	 */
	protected static final int COLUMN_UPDATEDATE = 14;

	/** 
	 * Index of column UPDATEFORM
	 */
	protected static final int COLUMN_UPDATEFORM = 15;

	/** 
	 * Index of column CONTRACTNO
	 */
	protected static final int COLUMN_CONTRACTNO = 16;

	/** 
	 * Index of column POANO
	 */
	protected static final int COLUMN_POANO = 17;

	/** 
	 * Index of column BILLSTATUS
	 */
	protected static final int COLUMN_BILLSTATUS = 18;

	/** 
	 * Index of column PAIDUPAMT
	 */
	protected static final int COLUMN_PAIDUPAMT = 19;

	/** 
	 * Index of column CLIENTNAME
	 */
	protected static final int COLUMN_CLIENTNAME = 20;

	/** 
	 * Index of column CLIENTACT
	 */
	protected static final int COLUMN_CLIENTACT = 21;

	/** 
	 * Index of column PAYBACKBANKNAME
	 */
	protected static final int COLUMN_PAYBACKBANKNAME = 22;

	/** 
	 * Index of column STARTDATE
	 */
	protected static final int COLUMN_STARTDATE = 23;

	/** 
	 * Index of column PAIDUPDATE
	 */
	protected static final int COLUMN_PAIDUPDATE = 24;

	/** 
	 * Index of column OPERATORID
	 */
	protected static final int COLUMN_OPERATORID = 25;

	/** 
	 * Index of column OPERATEDATE
	 */
	protected static final int COLUMN_OPERATEDATE = 26;

	/** 
	 * Index of column CHECKERID
	 */
	protected static final int COLUMN_CHECKERID = 27;

	/** 
	 * Index of column CHECKDATE
	 */
	protected static final int COLUMN_CHECKDATE = 28;

	/** 
	 * Index of column PAYBACKACTNAME
	 */
	protected static final int COLUMN_PAYBACKACTNAME = 29;

	/** 
	 * Index of column PRINCIPALAMT
	 */
	protected static final int COLUMN_PRINCIPALAMT = 30;

	/** 
	 * Index of column LATEFEE
	 */
	protected static final int COLUMN_LATEFEE = 31;

	/** 
	 * Index of column BREACHFEE
	 */
	protected static final int COLUMN_BREACHFEE = 32;

	/** 
	 * Index of column SERVICECHARGEFEE
	 */
	protected static final int COLUMN_SERVICECHARGEFEE = 33;

	/** 
	 * Index of column BILLTYPE
	 */
	protected static final int COLUMN_BILLTYPE = 34;

	/** 
	 * Index of column CUSTOMER_CODE
	 */
	protected static final int COLUMN_CUSTOMER_CODE = 35;

	/** 
	 * Index of column SIGN_ACCOUNT_NO
	 */
	protected static final int COLUMN_SIGN_ACCOUNT_NO = 36;

	/** 
	 * Index of column CLIENTNO
	 */
	protected static final int COLUMN_CLIENTNO = 37;

	/** 
	 * Index of column CLIENTIDTYPE
	 */
	protected static final int COLUMN_CLIENTIDTYPE = 38;

	/** 
	 * Index of column CLIENTID
	 */
	protected static final int COLUMN_CLIENTID = 39;

	/** 
	 * Index of column FAILUREREASON
	 */
	protected static final int COLUMN_FAILUREREASON = 40;

	/** 
	 * Index of column TXJOURNALNO
	 */
	protected static final int COLUMN_TXJOURNALNO = 41;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 41;

	/** 
	 * Index of primary-key column JOURNALNO
	 */
	protected static final int PK_COLUMN_JOURNALNO = 1;

	/** 
	 * Inserts a new row in the XFACTCUTPAYDETL table.
	 */
	public XfactcutpaydetlPk insert(Xfactcutpaydetl dto) throws XfactcutpaydetlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getJournalno() );
			stmt.setBigDecimal( index++, dto.getPaybackamt() );
			stmt.setTimestamp(index++, dto.getPaybackdate()==null ? null : new java.sql.Timestamp( dto.getPaybackdate().getTime() ) );
			stmt.setString( index++, dto.getPaybackact() );
			stmt.setString( index++, dto.getRecvact() );
			stmt.setString( index++, dto.getPaybackbankid() );
			stmt.setString( index++, dto.getPaybackbankno() );
			stmt.setString( index++, dto.getRecvbankid() );
			stmt.setString( index++, dto.getRecvbankno() );
			stmt.setString( index++, dto.getCreatorid() );
			stmt.setTimestamp(index++, dto.getCreatedate()==null ? null : new java.sql.Timestamp( dto.getCreatedate().getTime() ) );
			stmt.setString( index++, dto.getCreateform() );
			stmt.setString( index++, dto.getUpdatorid() );
			stmt.setTimestamp(index++, dto.getUpdatedate()==null ? null : new java.sql.Timestamp( dto.getUpdatedate().getTime() ) );
			stmt.setString( index++, dto.getUpdateform() );
			stmt.setString( index++, dto.getContractno() );
			stmt.setBigDecimal( index++, dto.getPoano() );
			stmt.setString( index++, dto.getBillstatus() );
			stmt.setBigDecimal( index++, dto.getPaidupamt() );
			stmt.setString( index++, dto.getClientname() );
			stmt.setString( index++, dto.getClientact() );
			stmt.setString( index++, dto.getPaybackbankname() );
			stmt.setTimestamp(index++, dto.getStartdate()==null ? null : new java.sql.Timestamp( dto.getStartdate().getTime() ) );
			stmt.setTimestamp(index++, dto.getPaidupdate()==null ? null : new java.sql.Timestamp( dto.getPaidupdate().getTime() ) );
			stmt.setString( index++, dto.getOperatorid() );
			stmt.setTimestamp(index++, dto.getOperatedate()==null ? null : new java.sql.Timestamp( dto.getOperatedate().getTime() ) );
			stmt.setString( index++, dto.getCheckerid() );
			stmt.setTimestamp(index++, dto.getCheckdate()==null ? null : new java.sql.Timestamp( dto.getCheckdate().getTime() ) );
			stmt.setString( index++, dto.getPaybackactname() );
			stmt.setBigDecimal( index++, dto.getPrincipalamt() );
			stmt.setBigDecimal( index++, dto.getLatefee() );
			stmt.setBigDecimal( index++, dto.getBreachfee() );
			stmt.setBigDecimal( index++, dto.getServicechargefee() );
			stmt.setString( index++, dto.getBilltype() );
			stmt.setString( index++, dto.getCustomerCode() );
			stmt.setString( index++, dto.getSignAccountNo() );
			stmt.setString( index++, dto.getClientno() );
			stmt.setString( index++, dto.getClientidtype() );
			stmt.setString( index++, dto.getClientid() );
			stmt.setString( index++, dto.getFailurereason() );
			stmt.setString( index++, dto.getTxjournalno() );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_INSERT + " with DTO: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the XFACTCUTPAYDETL table.
	 */
	public void update(XfactcutpaydetlPk pk, Xfactcutpaydetl dto) throws XfactcutpaydetlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_UPDATE + " with DTO: " + dto);
			}
		
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getJournalno() );
			stmt.setBigDecimal( index++, dto.getPaybackamt() );
			stmt.setTimestamp(index++, dto.getPaybackdate()==null ? null : new java.sql.Timestamp( dto.getPaybackdate().getTime() ) );
			stmt.setString( index++, dto.getPaybackact() );
			stmt.setString( index++, dto.getRecvact() );
			stmt.setString( index++, dto.getPaybackbankid() );
			stmt.setString( index++, dto.getPaybackbankno() );
			stmt.setString( index++, dto.getRecvbankid() );
			stmt.setString( index++, dto.getRecvbankno() );
			stmt.setString( index++, dto.getCreatorid() );
			stmt.setTimestamp(index++, dto.getCreatedate()==null ? null : new java.sql.Timestamp( dto.getCreatedate().getTime() ) );
			stmt.setString( index++, dto.getCreateform() );
			stmt.setString( index++, dto.getUpdatorid() );
			stmt.setTimestamp(index++, dto.getUpdatedate()==null ? null : new java.sql.Timestamp( dto.getUpdatedate().getTime() ) );
			stmt.setString( index++, dto.getUpdateform() );
			stmt.setString( index++, dto.getContractno() );
			stmt.setBigDecimal( index++, dto.getPoano() );
			stmt.setString( index++, dto.getBillstatus() );
			stmt.setBigDecimal( index++, dto.getPaidupamt() );
			stmt.setString( index++, dto.getClientname() );
			stmt.setString( index++, dto.getClientact() );
			stmt.setString( index++, dto.getPaybackbankname() );
			stmt.setTimestamp(index++, dto.getStartdate()==null ? null : new java.sql.Timestamp( dto.getStartdate().getTime() ) );
			stmt.setTimestamp(index++, dto.getPaidupdate()==null ? null : new java.sql.Timestamp( dto.getPaidupdate().getTime() ) );
			stmt.setString( index++, dto.getOperatorid() );
			stmt.setTimestamp(index++, dto.getOperatedate()==null ? null : new java.sql.Timestamp( dto.getOperatedate().getTime() ) );
			stmt.setString( index++, dto.getCheckerid() );
			stmt.setTimestamp(index++, dto.getCheckdate()==null ? null : new java.sql.Timestamp( dto.getCheckdate().getTime() ) );
			stmt.setString( index++, dto.getPaybackactname() );
			stmt.setBigDecimal( index++, dto.getPrincipalamt() );
			stmt.setBigDecimal( index++, dto.getLatefee() );
			stmt.setBigDecimal( index++, dto.getBreachfee() );
			stmt.setBigDecimal( index++, dto.getServicechargefee() );
			stmt.setString( index++, dto.getBilltype() );
			stmt.setString( index++, dto.getCustomerCode() );
			stmt.setString( index++, dto.getSignAccountNo() );
			stmt.setString( index++, dto.getClientno() );
			stmt.setString( index++, dto.getClientidtype() );
			stmt.setString( index++, dto.getClientid() );
			stmt.setString( index++, dto.getFailurereason() );
			stmt.setString( index++, dto.getTxjournalno() );
			stmt.setString( 42, pk.getJournalno() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the XFACTCUTPAYDETL table.
	 */
	public void delete(XfactcutpaydetlPk pk) throws XfactcutpaydetlDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getJournalno() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the XFACTCUTPAYDETL table that matches the specified primary-key value.
	 */
	public Xfactcutpaydetl findByPrimaryKey(XfactcutpaydetlPk pk) throws XfactcutpaydetlDaoException
	{
		return findByPrimaryKey( pk.getJournalno() );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfactcutpaydetl findByPrimaryKey(String journalno) throws XfactcutpaydetlDaoException
	{
		Xfactcutpaydetl ret[] = findByDynamicSelect( SQL_SELECT + " WHERE JOURNALNO = ?", new Object[] { journalno } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'JOURNALNO =:journalno and POANO=:poano'.
	 */
	public Xfactcutpaydetl[] findWhereJournalnoPoanoEquals(String journalno, String poano) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE JOURNALNO =? and POANO=? ORDER BY JOURNALNO", new Object[] { journalno, poano } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CPANO = :cpano'.
	 */
	public Xfactcutpaydetl[] findWhereCpanoEquals(String cpano) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPANO = ? ORDER BY CPANO", new Object[] { cpano } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'SERVICECHARGE = :servicecharge'.
	 */
	public Xfactcutpaydetl[] findWhereServicechargeEquals(BigDecimal servicecharge) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERVICECHARGE = ? ORDER BY SERVICECHARGE", new Object[] { servicecharge } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria ''.
	 */
	public Xfactcutpaydetl[] findAll() throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY JOURNALNO", null );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfactcutpaydetl[] findWhereJournalnoEquals(String journalno) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE JOURNALNO = ? ORDER BY JOURNALNO", new Object[] { journalno } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfactcutpaydetl[] findWhereContractnoEquals(String contractno) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTRACTNO = ? ORDER BY CONTRACTNO", new Object[] { contractno } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'POANO = :poano'.
	 */
	public Xfactcutpaydetl[] findWherePoanoEquals(BigDecimal poano) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POANO = ? ORDER BY POANO", new Object[] { poano } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTNAME = :clientname'.
	 */
	public Xfactcutpaydetl[] findWhereClientnameEquals(String clientname) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTNAME = ? ORDER BY CLIENTNAME", new Object[] { clientname } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTACT = :clientact'.
	 */
	public Xfactcutpaydetl[] findWhereClientactEquals(String clientact) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTACT = ? ORDER BY CLIENTACT", new Object[] { clientact } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKAMT = :paybackamt'.
	 */
	public Xfactcutpaydetl[] findWherePaybackamtEquals(BigDecimal paybackamt) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKAMT = ? ORDER BY PAYBACKAMT", new Object[] { paybackamt } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKDATE = :paybackdate'.
	 */
	public Xfactcutpaydetl[] findWherePaybackdateEquals(Date paybackdate) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKDATE = ? ORDER BY PAYBACKDATE", new Object[] { paybackdate==null ? null : new java.sql.Timestamp( paybackdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKACT = :paybackact'.
	 */
	public Xfactcutpaydetl[] findWherePaybackactEquals(String paybackact) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKACT = ? ORDER BY PAYBACKACT", new Object[] { paybackact } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKACTNAME = :paybackactname'.
	 */
	public Xfactcutpaydetl[] findWherePaybackactnameEquals(String paybackactname) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKACTNAME = ? ORDER BY PAYBACKACTNAME", new Object[] { paybackactname } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKBANKID = :paybackbankid'.
	 */
	public Xfactcutpaydetl[] findWherePaybackbankidEquals(String paybackbankid) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBANKID = ? ORDER BY PAYBACKBANKID", new Object[] { paybackbankid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKBANKNO = :paybackbankno'.
	 */
	public Xfactcutpaydetl[] findWherePaybackbanknoEquals(String paybackbankno) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBANKNO = ? ORDER BY PAYBACKBANKNO", new Object[] { paybackbankno } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAYBACKBANKNAME = :paybackbankname'.
	 */
	public Xfactcutpaydetl[] findWherePaybackbanknameEquals(String paybackbankname) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAYBACKBANKNAME = ? ORDER BY PAYBACKBANKNAME", new Object[] { paybackbankname } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'RECVACT = :recvact'.
	 */
	public Xfactcutpaydetl[] findWhereRecvactEquals(String recvact) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVACT = ? ORDER BY RECVACT", new Object[] { recvact } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'RECVBANKID = :recvbankid'.
	 */
	public Xfactcutpaydetl[] findWhereRecvbankidEquals(String recvbankid) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVBANKID = ? ORDER BY RECVBANKID", new Object[] { recvbankid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'RECVBANKNO = :recvbankno'.
	 */
	public Xfactcutpaydetl[] findWhereRecvbanknoEquals(String recvbankno) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RECVBANKNO = ? ORDER BY RECVBANKNO", new Object[] { recvbankno } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Xfactcutpaydetl[] findWhereStartdateEquals(Date startdate) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STARTDATE = ? ORDER BY STARTDATE", new Object[] { startdate==null ? null : new java.sql.Timestamp( startdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'BILLSTATUS = :billstatus'.
	 */
	public Xfactcutpaydetl[] findWhereBillstatusEquals(String billstatus) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLSTATUS = ? ORDER BY BILLSTATUS", new Object[] { billstatus } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAIDUPAMT = :paidupamt'.
	 */
	public Xfactcutpaydetl[] findWherePaidupamtEquals(BigDecimal paidupamt) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAIDUPAMT = ? ORDER BY PAIDUPAMT", new Object[] { paidupamt } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PAIDUPDATE = :paidupdate'.
	 */
	public Xfactcutpaydetl[] findWherePaidupdateEquals(Date paidupdate) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PAIDUPDATE = ? ORDER BY PAIDUPDATE", new Object[] { paidupdate==null ? null : new java.sql.Timestamp( paidupdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'OPERATORID = :operatorid'.
	 */
	public Xfactcutpaydetl[] findWhereOperatoridEquals(String operatorid) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERATORID = ? ORDER BY OPERATORID", new Object[] { operatorid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'OPERATEDATE = :operatedate'.
	 */
	public Xfactcutpaydetl[] findWhereOperatedateEquals(Date operatedate) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE OPERATEDATE = ? ORDER BY OPERATEDATE", new Object[] { operatedate==null ? null : new java.sql.Timestamp( operatedate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CHECKERID = :checkerid'.
	 */
	public Xfactcutpaydetl[] findWhereCheckeridEquals(String checkerid) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHECKERID = ? ORDER BY CHECKERID", new Object[] { checkerid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CHECKDATE = :checkdate'.
	 */
	public Xfactcutpaydetl[] findWhereCheckdateEquals(Date checkdate) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CHECKDATE = ? ORDER BY CHECKDATE", new Object[] { checkdate==null ? null : new java.sql.Timestamp( checkdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CREATORID = :creatorid'.
	 */
	public Xfactcutpaydetl[] findWhereCreatoridEquals(String creatorid) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATORID = ? ORDER BY CREATORID", new Object[] { creatorid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CREATEDATE = :createdate'.
	 */
	public Xfactcutpaydetl[] findWhereCreatedateEquals(Date createdate) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATEDATE = ? ORDER BY CREATEDATE", new Object[] { createdate==null ? null : new java.sql.Timestamp( createdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CREATEFORM = :createform'.
	 */
	public Xfactcutpaydetl[] findWhereCreateformEquals(String createform) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATEFORM = ? ORDER BY CREATEFORM", new Object[] { createform } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'UPDATORID = :updatorid'.
	 */
	public Xfactcutpaydetl[] findWhereUpdatoridEquals(String updatorid) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATORID = ? ORDER BY UPDATORID", new Object[] { updatorid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'UPDATEDATE = :updatedate'.
	 */
	public Xfactcutpaydetl[] findWhereUpdatedateEquals(Date updatedate) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATEDATE = ? ORDER BY UPDATEDATE", new Object[] { updatedate==null ? null : new java.sql.Timestamp( updatedate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'UPDATEFORM = :updateform'.
	 */
	public Xfactcutpaydetl[] findWhereUpdateformEquals(String updateform) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATEFORM = ? ORDER BY UPDATEFORM", new Object[] { updateform } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'PRINCIPALAMT = :principalamt'.
	 */
	public Xfactcutpaydetl[] findWherePrincipalamtEquals(BigDecimal principalamt) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRINCIPALAMT = ? ORDER BY PRINCIPALAMT", new Object[] { principalamt } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'SERVICECHARGEFEE = :servicechargefee'.
	 */
	public Xfactcutpaydetl[] findWhereServicechargefeeEquals(BigDecimal servicechargefee) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SERVICECHARGEFEE = ? ORDER BY SERVICECHARGEFEE", new Object[] { servicechargefee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'LATEFEE = :latefee'.
	 */
	public Xfactcutpaydetl[] findWhereLatefeeEquals(BigDecimal latefee) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LATEFEE = ? ORDER BY LATEFEE", new Object[] { latefee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'BREACHFEE = :breachfee'.
	 */
	public Xfactcutpaydetl[] findWhereBreachfeeEquals(BigDecimal breachfee) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BREACHFEE = ? ORDER BY BREACHFEE", new Object[] { breachfee } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'BILLTYPE = :billtype'.
	 */
	public Xfactcutpaydetl[] findWhereBilltypeEquals(String billtype) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BILLTYPE = ? ORDER BY BILLTYPE", new Object[] { billtype } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CUSTOMER_CODE = :customerCode'.
	 */
	public Xfactcutpaydetl[] findWhereCustomerCodeEquals(String customerCode) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CUSTOMER_CODE = ? ORDER BY CUSTOMER_CODE", new Object[] { customerCode } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'SIGN_ACCOUNT_NO = :signAccountNo'.
	 */
	public Xfactcutpaydetl[] findWhereSignAccountNoEquals(String signAccountNo) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SIGN_ACCOUNT_NO = ? ORDER BY SIGN_ACCOUNT_NO", new Object[] { signAccountNo } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTNO = :clientno'.
	 */
	public Xfactcutpaydetl[] findWhereClientnoEquals(String clientno) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTNO = ? ORDER BY CLIENTNO", new Object[] { clientno } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTIDTYPE = :clientidtype'.
	 */
	public Xfactcutpaydetl[] findWhereClientidtypeEquals(String clientidtype) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTIDTYPE = ? ORDER BY CLIENTIDTYPE", new Object[] { clientidtype } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'CLIENTID = :clientid'.
	 */
	public Xfactcutpaydetl[] findWhereClientidEquals(String clientid) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLIENTID = ? ORDER BY CLIENTID", new Object[] { clientid } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'FAILUREREASON = :failurereason'.
	 */
	public Xfactcutpaydetl[] findWhereFailurereasonEquals(String failurereason) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FAILUREREASON = ? ORDER BY FAILUREREASON", new Object[] { failurereason } );
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the criteria 'TXJOURNALNO = :txjournalno'.
	 */
	public Xfactcutpaydetl[] findWhereTxjournalnoEquals(String txjournalno) throws XfactcutpaydetlDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TXJOURNALNO = ? ORDER BY TXJOURNALNO", new Object[] { txjournalno } );
	}

	/**
	 * Method 'XfactcutpaydetlDaoImpl'
	 * 
	 */
	public XfactcutpaydetlDaoImpl()
	{
	}

	/**
	 * Method 'XfactcutpaydetlDaoImpl'
	 * 
	 * @param userConn
	 */
	public XfactcutpaydetlDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CMS.XFACTCUTPAYDETL";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Xfactcutpaydetl fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Xfactcutpaydetl dto = new Xfactcutpaydetl();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Xfactcutpaydetl[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Xfactcutpaydetl dto = new Xfactcutpaydetl();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Xfactcutpaydetl ret[] = new Xfactcutpaydetl[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Xfactcutpaydetl dto, ResultSet rs) throws SQLException
	{
		dto.setJournalno( rs.getString( COLUMN_JOURNALNO ) );
		dto.setPaybackamt( rs.getBigDecimal(COLUMN_PAYBACKAMT));
		dto.setPaybackdate( rs.getTimestamp(COLUMN_PAYBACKDATE ) );
		dto.setPaybackact( rs.getString( COLUMN_PAYBACKACT ) );
		dto.setRecvact( rs.getString( COLUMN_RECVACT ) );
		dto.setPaybackbankid( rs.getString( COLUMN_PAYBACKBANKID ) );
		dto.setPaybackbankno( rs.getString( COLUMN_PAYBACKBANKNO ) );
		dto.setRecvbankid( rs.getString( COLUMN_RECVBANKID ) );
		dto.setRecvbankno( rs.getString( COLUMN_RECVBANKNO ) );
		dto.setCreatorid( rs.getString( COLUMN_CREATORID ) );
		dto.setCreatedate( rs.getTimestamp(COLUMN_CREATEDATE ) );
		dto.setCreateform( rs.getString( COLUMN_CREATEFORM ) );
		dto.setUpdatorid( rs.getString( COLUMN_UPDATORID ) );
		dto.setUpdatedate( rs.getTimestamp(COLUMN_UPDATEDATE ) );
		dto.setUpdateform( rs.getString( COLUMN_UPDATEFORM ) );
		dto.setContractno( rs.getString( COLUMN_CONTRACTNO ) );
		dto.setPoano( rs.getBigDecimal(COLUMN_POANO));
		dto.setBillstatus( rs.getString( COLUMN_BILLSTATUS ) );
		dto.setPaidupamt( rs.getBigDecimal(COLUMN_PAIDUPAMT));
		dto.setClientname( rs.getString( COLUMN_CLIENTNAME ) );
		dto.setClientact( rs.getString( COLUMN_CLIENTACT ) );
		dto.setPaybackbankname( rs.getString( COLUMN_PAYBACKBANKNAME ) );
		dto.setStartdate( rs.getTimestamp(COLUMN_STARTDATE ) );
		dto.setPaidupdate( rs.getTimestamp(COLUMN_PAIDUPDATE ) );
		dto.setOperatorid( rs.getString( COLUMN_OPERATORID ) );
		dto.setOperatedate( rs.getTimestamp(COLUMN_OPERATEDATE ) );
		dto.setCheckerid( rs.getString( COLUMN_CHECKERID ) );
		dto.setCheckdate( rs.getTimestamp(COLUMN_CHECKDATE ) );
		dto.setPaybackactname( rs.getString( COLUMN_PAYBACKACTNAME ) );
		dto.setPrincipalamt( rs.getBigDecimal(COLUMN_PRINCIPALAMT));
		dto.setLatefee( rs.getBigDecimal(COLUMN_LATEFEE));
		dto.setBreachfee( rs.getBigDecimal(COLUMN_BREACHFEE));
		dto.setServicechargefee( rs.getBigDecimal(COLUMN_SERVICECHARGEFEE));
		dto.setBilltype( rs.getString( COLUMN_BILLTYPE ) );
		dto.setCustomerCode( rs.getString( COLUMN_CUSTOMER_CODE ) );
		dto.setSignAccountNo( rs.getString( COLUMN_SIGN_ACCOUNT_NO ) );
		dto.setClientno( rs.getString( COLUMN_CLIENTNO ) );
		dto.setClientidtype( rs.getString( COLUMN_CLIENTIDTYPE ) );
		dto.setClientid( rs.getString( COLUMN_CLIENTID ) );
		dto.setFailurereason( rs.getString( COLUMN_FAILUREREASON ) );
		dto.setTxjournalno( rs.getString( COLUMN_TXJOURNALNO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Xfactcutpaydetl dto)
	{
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfactcutpaydetl[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfactcutpaydetlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the XFACTCUTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfactcutpaydetl[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfactcutpaydetlDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new XfactcutpaydetlDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
