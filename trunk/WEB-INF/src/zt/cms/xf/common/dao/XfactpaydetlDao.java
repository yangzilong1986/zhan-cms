/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.dao;

import java.util.Date;
import java.math.BigDecimal;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;

public interface XfactpaydetlDao
{
	/** 
	 * Inserts a new row in the XFACTPAYDETL table.
	 */
	public XfactpaydetlPk insert(Xfactpaydetl dto) throws XfactpaydetlDaoException;

	/** 
	 * Updates a single row in the XFACTPAYDETL table.
	 */
	public void update(XfactpaydetlPk pk, Xfactpaydetl dto) throws XfactpaydetlDaoException;

	/** 
	 * Deletes a single row in the XFACTPAYDETL table.
	 */
	public void delete(XfactpaydetlPk pk) throws XfactpaydetlDaoException;

	/** 
	 * Returns the rows from the XFACTPAYDETL table that matches the specified primary-key value.
	 */
	public Xfactpaydetl findByPrimaryKey(XfactpaydetlPk pk) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfactpaydetl findByPrimaryKey(String journalno) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria ''.
	 */
	public Xfactpaydetl[] findAll() throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfactpaydetl[] findWhereJournalnoEquals(String journalno) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'CONTRACTNO = :contractno'.
	 */
	public Xfactpaydetl[] findWhereContractnoEquals(String contractno) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'CPANO = :cpano'.
	 */
	public Xfactpaydetl[] findWhereCpanoEquals(String cpano) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'PAYDATE = :paydate'.
	 */
	public Xfactpaydetl[] findWherePaydateEquals(Date paydate) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'PAYSTATUS = :paystatus'.
	 */
	public Xfactpaydetl[] findWherePaystatusEquals(String paystatus) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'PAYAMT = :payamt'.
	 */
	public Xfactpaydetl[] findWherePayamtEquals(BigDecimal payamt) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'PAYACT = :payact'.
	 */
	public Xfactpaydetl[] findWherePayactEquals(String payact) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'RECVACT = :recvact'.
	 */
	public Xfactpaydetl[] findWhereRecvactEquals(String recvact) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'RECVBANKID = :recvbankid'.
	 */
	public Xfactpaydetl[] findWhereRecvbankidEquals(String recvbankid) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'RECVBANKNO = :recvbankno'.
	 */
	public Xfactpaydetl[] findWhereRecvbanknoEquals(String recvbankno) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'RECVBANKNAME = :recvbankname'.
	 */
	public Xfactpaydetl[] findWhereRecvbanknameEquals(String recvbankname) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'OPERATORID = :operatorid'.
	 */
	public Xfactpaydetl[] findWhereOperatoridEquals(String operatorid) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'OPERATEDATE = :operatedate'.
	 */
	public Xfactpaydetl[] findWhereOperatedateEquals(Date operatedate) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'CHECKERID = :checkerid'.
	 */
	public Xfactpaydetl[] findWhereCheckeridEquals(String checkerid) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the criteria 'CHECKDATE = :checkdate'.
	 */
	public Xfactpaydetl[] findWhereCheckdateEquals(Date checkdate) throws XfactpaydetlDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfactpaydetl[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfactpaydetlDaoException;

	/** 
	 * Returns all rows from the XFACTPAYDETL table that match the specified arbitrary SQL statement
	 */
	public Xfactpaydetl[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfactpaydetlDaoException;

}
