/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.jdbc;

import zt.cms.xf.common.dao.*;
import zt.cms.xf.common.factory.*;
import java.util.Date;
import java.math.BigDecimal;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class XfactnoinfoDaoImpl extends AbstractDAO implements XfactnoinfoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT APPACTNO, APPNO, STARTDATE, ENDDATE, ACTNOSTATUS, CREATORID, CREATEDATE, CREATEFORM, UPDATORID, UPDATEDATE, UPDATEFORM FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( APPACTNO, APPNO, STARTDATE, ENDDATE, ACTNOSTATUS, CREATORID, CREATEDATE, CREATEFORM, UPDATORID, UPDATEDATE, UPDATEFORM ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET APPACTNO = ?, APPNO = ?, STARTDATE = ?, ENDDATE = ?, ACTNOSTATUS = ?, CREATORID = ?, CREATEDATE = ?, CREATEFORM = ?, UPDATORID = ?, UPDATEDATE = ?, UPDATEFORM = ? WHERE APPACTNO = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE APPACTNO = ?";

	/** 
	 * Index of column APPACTNO
	 */
	protected static final int COLUMN_APPACTNO = 1;

	/** 
	 * Index of column APPNO
	 */
	protected static final int COLUMN_APPNO = 2;

	/** 
	 * Index of column STARTDATE
	 */
	protected static final int COLUMN_STARTDATE = 3;

	/** 
	 * Index of column ENDDATE
	 */
	protected static final int COLUMN_ENDDATE = 4;

	/** 
	 * Index of column ACTNOSTATUS
	 */
	protected static final int COLUMN_ACTNOSTATUS = 5;

	/** 
	 * Index of column CREATORID
	 */
	protected static final int COLUMN_CREATORID = 6;

	/** 
	 * Index of column CREATEDATE
	 */
	protected static final int COLUMN_CREATEDATE = 7;

	/** 
	 * Index of column CREATEFORM
	 */
	protected static final int COLUMN_CREATEFORM = 8;

	/** 
	 * Index of column UPDATORID
	 */
	protected static final int COLUMN_UPDATORID = 9;

	/** 
	 * Index of column UPDATEDATE
	 */
	protected static final int COLUMN_UPDATEDATE = 10;

	/** 
	 * Index of column UPDATEFORM
	 */
	protected static final int COLUMN_UPDATEFORM = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column APPACTNO
	 */
	protected static final int PK_COLUMN_APPACTNO = 1;

	/** 
	 * Inserts a new row in the XFACTNOINFO table.
	 */
	public XfactnoinfoPk insert(Xfactnoinfo dto) throws XfactnoinfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setString( index++, dto.getAppactno() );
			stmt.setString( index++, dto.getAppno() );
			stmt.setTimestamp(index++, dto.getStartdate()==null ? null : new java.sql.Timestamp( dto.getStartdate().getTime() ) );
			stmt.setTimestamp(index++, dto.getEnddate()==null ? null : new java.sql.Timestamp( dto.getEnddate().getTime() ) );
			stmt.setBigDecimal( index++, dto.getActnostatus() );
			stmt.setString( index++, dto.getCreatorid() );
			stmt.setTimestamp(index++, dto.getCreatedate()==null ? null : new java.sql.Timestamp( dto.getCreatedate().getTime() ) );
			stmt.setString( index++, dto.getCreateform() );
			stmt.setString( index++, dto.getUpdatorid() );
			stmt.setTimestamp(index++, dto.getUpdatedate()==null ? null : new java.sql.Timestamp( dto.getUpdatedate().getTime() ) );
			stmt.setString( index++, dto.getUpdateform() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new XfactnoinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the XFACTNOINFO table.
	 */
	public void update(XfactnoinfoPk pk, Xfactnoinfo dto) throws XfactnoinfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setString( index++, dto.getAppactno() );
			stmt.setString( index++, dto.getAppno() );
			stmt.setTimestamp(index++, dto.getStartdate()==null ? null : new java.sql.Timestamp( dto.getStartdate().getTime() ) );
			stmt.setTimestamp(index++, dto.getEnddate()==null ? null : new java.sql.Timestamp( dto.getEnddate().getTime() ) );
			stmt.setBigDecimal( index++, dto.getActnostatus() );
			stmt.setString( index++, dto.getCreatorid() );
			stmt.setTimestamp(index++, dto.getCreatedate()==null ? null : new java.sql.Timestamp( dto.getCreatedate().getTime() ) );
			stmt.setString( index++, dto.getCreateform() );
			stmt.setString( index++, dto.getUpdatorid() );
			stmt.setTimestamp(index++, dto.getUpdatedate()==null ? null : new java.sql.Timestamp( dto.getUpdatedate().getTime() ) );
			stmt.setString( index++, dto.getUpdateform() );
			stmt.setString( 12, pk.getAppactno() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new XfactnoinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the XFACTNOINFO table.
	 */
	public void delete(XfactnoinfoPk pk) throws XfactnoinfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setString( 1, pk.getAppactno() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new XfactnoinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the XFACTNOINFO table that matches the specified primary-key value.
	 */
	public Xfactnoinfo findByPrimaryKey(XfactnoinfoPk pk) throws XfactnoinfoDaoException
	{
		return findByPrimaryKey( pk.getAppactno() );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'APPACTNO = :appactno'.
	 */
	public Xfactnoinfo findByPrimaryKey(String appactno) throws XfactnoinfoDaoException
	{
		Xfactnoinfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE APPACTNO = ?", new Object[] { appactno } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria ''.
	 */
	public Xfactnoinfo[] findAll() throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY APPACTNO", null );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'APPACTNO = :appactno'.
	 */
	public Xfactnoinfo[] findWhereAppactnoEquals(String appactno) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APPACTNO = ? ORDER BY APPACTNO", new Object[] { appactno } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'APPNO = :appno'.
	 */
	public Xfactnoinfo[] findWhereAppnoEquals(String appno) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE APPNO = ? ORDER BY APPNO", new Object[] { appno } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Xfactnoinfo[] findWhereStartdateEquals(Date startdate) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STARTDATE = ? ORDER BY STARTDATE", new Object[] { startdate==null ? null : new java.sql.Timestamp( startdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'ENDDATE = :enddate'.
	 */
	public Xfactnoinfo[] findWhereEnddateEquals(Date enddate) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ENDDATE = ? ORDER BY ENDDATE", new Object[] { enddate==null ? null : new java.sql.Timestamp( enddate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'ACTNOSTATUS = :actnostatus'.
	 */
	public Xfactnoinfo[] findWhereActnostatusEquals(BigDecimal actnostatus) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ACTNOSTATUS = ? ORDER BY ACTNOSTATUS", new Object[] { actnostatus } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'CREATORID = :creatorid'.
	 */
	public Xfactnoinfo[] findWhereCreatoridEquals(String creatorid) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATORID = ? ORDER BY CREATORID", new Object[] { creatorid } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'CREATEDATE = :createdate'.
	 */
	public Xfactnoinfo[] findWhereCreatedateEquals(Date createdate) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATEDATE = ? ORDER BY CREATEDATE", new Object[] { createdate==null ? null : new java.sql.Timestamp( createdate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'CREATEFORM = :createform'.
	 */
	public Xfactnoinfo[] findWhereCreateformEquals(String createform) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CREATEFORM = ? ORDER BY CREATEFORM", new Object[] { createform } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'UPDATORID = :updatorid'.
	 */
	public Xfactnoinfo[] findWhereUpdatoridEquals(String updatorid) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATORID = ? ORDER BY UPDATORID", new Object[] { updatorid } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'UPDATEDATE = :updatedate'.
	 */
	public Xfactnoinfo[] findWhereUpdatedateEquals(Date updatedate) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATEDATE = ? ORDER BY UPDATEDATE", new Object[] { updatedate==null ? null : new java.sql.Timestamp( updatedate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the criteria 'UPDATEFORM = :updateform'.
	 */
	public Xfactnoinfo[] findWhereUpdateformEquals(String updateform) throws XfactnoinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UPDATEFORM = ? ORDER BY UPDATEFORM", new Object[] { updateform } );
	}

	/**
	 * Method 'XfactnoinfoDaoImpl'
	 * 
	 */
	public XfactnoinfoDaoImpl()
	{
	}

	/**
	 * Method 'XfactnoinfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public XfactnoinfoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "CMS.XFACTNOINFO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Xfactnoinfo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Xfactnoinfo dto = new Xfactnoinfo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Xfactnoinfo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Xfactnoinfo dto = new Xfactnoinfo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Xfactnoinfo ret[] = new Xfactnoinfo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Xfactnoinfo dto, ResultSet rs) throws SQLException
	{
		dto.setAppactno( rs.getString( COLUMN_APPACTNO ) );
		dto.setAppno( rs.getString( COLUMN_APPNO ) );
		dto.setStartdate( rs.getTimestamp(COLUMN_STARTDATE ) );
		dto.setEnddate( rs.getTimestamp(COLUMN_ENDDATE ) );
		dto.setActnostatus( rs.getBigDecimal(COLUMN_ACTNOSTATUS));
		dto.setCreatorid( rs.getString( COLUMN_CREATORID ) );
		dto.setCreatedate( rs.getTimestamp(COLUMN_CREATEDATE ) );
		dto.setCreateform( rs.getString( COLUMN_CREATEFORM ) );
		dto.setUpdatorid( rs.getString( COLUMN_UPDATORID ) );
		dto.setUpdatedate( rs.getTimestamp(COLUMN_UPDATEDATE ) );
		dto.setUpdateform( rs.getString( COLUMN_UPDATEFORM ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Xfactnoinfo dto)
	{
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the specified arbitrary SQL statement
	 */
	public Xfactnoinfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfactnoinfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new XfactnoinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the XFACTNOINFO table that match the specified arbitrary SQL statement
	 */
	public Xfactnoinfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfactnoinfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new XfactnoinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
