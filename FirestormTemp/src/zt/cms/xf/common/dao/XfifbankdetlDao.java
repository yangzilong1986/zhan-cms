/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package zt.cms.xf.common.dao;

import java.math.BigDecimal;
import java.util.Date;
import zt.cms.xf.common.dto.*;
import zt.cms.xf.common.exceptions.*;

public interface XfifbankdetlDao
{
	/** 
	 * Inserts a new row in the XFIFBANKDETL table.
	 */
	public XfifbankdetlPk insert(Xfifbankdetl dto) throws XfifbankdetlDaoException;

	/** 
	 * Updates a single row in the XFIFBANKDETL table.
	 */
	public void update(XfifbankdetlPk pk, Xfifbankdetl dto) throws XfifbankdetlDaoException;

	/** 
	 * Deletes a single row in the XFIFBANKDETL table.
	 */
	public void delete(XfifbankdetlPk pk) throws XfifbankdetlDaoException;

	/** 
	 * Returns the rows from the XFIFBANKDETL table that matches the specified primary-key value.
	 */
	public Xfifbankdetl findByPrimaryKey(XfifbankdetlPk pk) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfifbankdetl findByPrimaryKey(String journalno) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria ''.
	 */
	public Xfifbankdetl[] findAll() throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'JOURNALNO = :journalno'.
	 */
	public Xfifbankdetl[] findWhereJournalnoEquals(String journalno) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'BIZSEQNO = :bizseqno'.
	 */
	public Xfifbankdetl[] findWhereBizseqnoEquals(String bizseqno) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'TXNDATE = :txndate'.
	 */
	public Xfifbankdetl[] findWhereTxndateEquals(String txndate) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'TXNTYPE = :txntype'.
	 */
	public Xfifbankdetl[] findWhereTxntypeEquals(String txntype) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'TOTALCOUNT = :totalcount'.
	 */
	public Xfifbankdetl[] findWhereTotalcountEquals(BigDecimal totalcount) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'CURRCOUNT = :currcount'.
	 */
	public Xfifbankdetl[] findWhereCurrcountEquals(BigDecimal currcount) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'MULTIFLAG = :multiflag'.
	 */
	public Xfifbankdetl[] findWhereMultiflagEquals(String multiflag) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'TRANSFERACT = :transferact'.
	 */
	public Xfifbankdetl[] findWhereTransferactEquals(String transferact) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'TOTALAMT = :totalamt'.
	 */
	public Xfifbankdetl[] findWhereTotalamtEquals(BigDecimal totalamt) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'FAILAMT = :failamt'.
	 */
	public Xfifbankdetl[] findWhereFailamtEquals(BigDecimal failamt) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'FAILCOUNT = :failcount'.
	 */
	public Xfifbankdetl[] findWhereFailcountEquals(BigDecimal failcount) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'USAGE = :usage'.
	 */
	public Xfifbankdetl[] findWhereUsageEquals(String usage) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'REMARK = :remark'.
	 */
	public Xfifbankdetl[] findWhereRemarkEquals(String remark) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'REMARK1 = :remark1'.
	 */
	public Xfifbankdetl[] findWhereRemark1Equals(String remark1) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'REMARK2 = :remark2'.
	 */
	public Xfifbankdetl[] findWhereRemark2Equals(String remark2) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'STARTDATE = :startdate'.
	 */
	public Xfifbankdetl[] findWhereStartdateEquals(Date startdate) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'STATUS = :status'.
	 */
	public Xfifbankdetl[] findWhereStatusEquals(String status) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'BANKID = :bankid'.
	 */
	public Xfifbankdetl[] findWhereBankidEquals(String bankid) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'SYSTEMTYPE = :systemtype'.
	 */
	public Xfifbankdetl[] findWhereSystemtypeEquals(String systemtype) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'OPERATORID = :operatorid'.
	 */
	public Xfifbankdetl[] findWhereOperatoridEquals(String operatorid) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'OPERATEDATE = :operatedate'.
	 */
	public Xfifbankdetl[] findWhereOperatedateEquals(Date operatedate) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'CHECKERID = :checkerid'.
	 */
	public Xfifbankdetl[] findWhereCheckeridEquals(String checkerid) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'CHECKDATE = :checkdate'.
	 */
	public Xfifbankdetl[] findWhereCheckdateEquals(Date checkdate) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'CREATORID = :creatorid'.
	 */
	public Xfifbankdetl[] findWhereCreatoridEquals(String creatorid) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'CREATEDATE = :createdate'.
	 */
	public Xfifbankdetl[] findWhereCreatedateEquals(Date createdate) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'CREATEFORM = :createform'.
	 */
	public Xfifbankdetl[] findWhereCreateformEquals(String createform) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'UPDATORID = :updatorid'.
	 */
	public Xfifbankdetl[] findWhereUpdatoridEquals(String updatorid) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'UPDATEDATE = :updatedate'.
	 */
	public Xfifbankdetl[] findWhereUpdatedateEquals(Date updatedate) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'UPDATEFORM = :updateform'.
	 */
	public Xfifbankdetl[] findWhereUpdateformEquals(String updateform) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'DATA = :data'.
	 */
	public Xfifbankdetl[] findWhereDataEquals(String data) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the criteria 'LOG = :log'.
	 */
	public Xfifbankdetl[] findWhereLogEquals(String log) throws XfifbankdetlDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the specified arbitrary SQL statement
	 */
	public Xfifbankdetl[] findByDynamicSelect(String sql, Object[] sqlParams) throws XfifbankdetlDaoException;

	/** 
	 * Returns all rows from the XFIFBANKDETL table that match the specified arbitrary SQL statement
	 */
	public Xfifbankdetl[] findByDynamicWhere(String sql, Object[] sqlParams) throws XfifbankdetlDaoException;

}
